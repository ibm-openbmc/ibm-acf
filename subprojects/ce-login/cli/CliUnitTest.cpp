#include "CliUnitTest.h"

#include "../celogin/src/CeLoginUtil.h"
#include "CliCeLoginV1.h"

#include <CeLogin.h>

#include <array>
#include <iostream>
#include <vector>

const unsigned char key1_priv_der[] = {
    0x30, 0x82, 0x09, 0x28, 0x02, 0x01, 0x00, 0x02, 0x82, 0x02, 0x01, 0x00,
    0xce, 0x75, 0xab, 0x47, 0xd1, 0xb9, 0xa8, 0x09, 0x2a, 0x9e, 0x50, 0x74,
    0xe9, 0xf2, 0x8e, 0x6f, 0xc9, 0x9f, 0x62, 0x7d, 0xf7, 0xfb, 0x45, 0xc2,
    0xca, 0xb5, 0x50, 0xf3, 0xcc, 0xeb, 0xdb, 0xee, 0x89, 0x7c, 0x2e, 0xea,
    0xd0, 0xfd, 0x3a, 0xcb, 0x47, 0x42, 0xbd, 0x52, 0xe9, 0x80, 0xd5, 0x88,
    0x88, 0xd9, 0xce, 0x54, 0xeb, 0x9c, 0x43, 0x5f, 0xea, 0x50, 0x28, 0xfc,
    0xca, 0x03, 0x47, 0xb0, 0x05, 0x46, 0x64, 0x54, 0xd4, 0x8c, 0x16, 0x5f,
    0x14, 0x93, 0x01, 0x48, 0x19, 0x13, 0xac, 0xc4, 0x76, 0x25, 0xd6, 0x86,
    0x55, 0xe7, 0x79, 0x86, 0x87, 0x08, 0x42, 0x38, 0xb4, 0xcf, 0xc5, 0x6b,
    0x9d, 0x6f, 0xc6, 0x89, 0x48, 0xaa, 0x35, 0x0b, 0x3b, 0xb5, 0x29, 0xeb,
    0xbf, 0xa4, 0x2e, 0xb4, 0xe9, 0x22, 0xc4, 0xb2, 0xc9, 0xe3, 0x75, 0xee,
    0x90, 0x11, 0x4f, 0x3b, 0x12, 0xf0, 0x57, 0xc1, 0xcf, 0x2c, 0x40, 0xaa,
    0xaf, 0x00, 0x35, 0xb3, 0x5c, 0xe1, 0x64, 0x4e, 0xaa, 0xad, 0xe4, 0x1d,
    0xfc, 0x5a, 0x71, 0x49, 0x3d, 0xdd, 0x4f, 0x4b, 0x4e, 0x35, 0xe7, 0x43,
    0x8f, 0x23, 0x15, 0xa0, 0xa4, 0x64, 0x95, 0x2e, 0x63, 0x70, 0xf2, 0xc3,
    0xdd, 0xd8, 0x77, 0x82, 0xc9, 0x75, 0xc1, 0x37, 0xfe, 0x13, 0xa8, 0xec,
    0x8d, 0xc3, 0x3b, 0x50, 0xd5, 0x24, 0x9d, 0x80, 0x69, 0xca, 0xa5, 0xcd,
    0x72, 0x23, 0x8f, 0x7c, 0xba, 0xd7, 0x28, 0xe5, 0xb6, 0x2f, 0xd3, 0xa9,
    0x78, 0x16, 0x39, 0xfb, 0xa5, 0x35, 0x57, 0x5e, 0xde, 0x95, 0x7f, 0xba,
    0xae, 0x88, 0x99, 0x0d, 0xff, 0xa3, 0x33, 0xfb, 0x03, 0x5e, 0xf4, 0xb7,
    0xfc, 0x91, 0x1a, 0x11, 0x38, 0xa3, 0xb5, 0x72, 0x8a, 0x88, 0xc5, 0x3b,
    0x7e, 0xe7, 0x4a, 0xa5, 0x94, 0xf9, 0xa7, 0x63, 0x84, 0x5c, 0x67, 0xd4,
    0x31, 0xe5, 0xab, 0x2e, 0x9c, 0xc2, 0xc7, 0x70, 0x7b, 0xb8, 0xe5, 0xb6,
    0x61, 0x91, 0xb8, 0x13, 0x82, 0x54, 0xab, 0xca, 0x08, 0x64, 0xf2, 0xcf,
    0xde, 0x60, 0x93, 0xb5, 0x81, 0x8b, 0x53, 0x36, 0x45, 0x85, 0x7a, 0xfb,
    0xc7, 0xbd, 0x38, 0x96, 0xfa, 0x22, 0xe0, 0xec, 0x87, 0xf4, 0xd1, 0x75,
    0x18, 0x0c, 0xb8, 0xa0, 0xc4, 0xe2, 0x8f, 0x1b, 0x72, 0x3d, 0x2e, 0x3c,
    0x9e, 0x94, 0xcc, 0x47, 0xa1, 0x56, 0x87, 0x4f, 0x24, 0xc0, 0xe2, 0x13,
    0x31, 0x19, 0x2a, 0x93, 0xde, 0x8e, 0x97, 0x4e, 0x0c, 0xb1, 0x2a, 0x27,
    0x6f, 0x22, 0xe7, 0x8f, 0x24, 0x4f, 0xa4, 0xc2, 0x54, 0xf6, 0x42, 0xba,
    0x4d, 0x43, 0xcc, 0xba, 0x7a, 0x49, 0x1d, 0xd3, 0x9b, 0xc9, 0x31, 0xf7,
    0x08, 0x4b, 0x84, 0xdf, 0x94, 0x04, 0x86, 0xa0, 0x42, 0xd7, 0xcf, 0xd8,
    0x88, 0xcb, 0xc5, 0x1d, 0xfe, 0x23, 0x69, 0x0a, 0x3b, 0xc6, 0x60, 0xa8,
    0xf6, 0x69, 0x13, 0x3e, 0xfc, 0xd0, 0x09, 0x8a, 0xdd, 0x92, 0x12, 0x11,
    0xac, 0x3e, 0xdf, 0xb4, 0xdc, 0x1b, 0x82, 0xb8, 0x9b, 0x42, 0x0b, 0xa1,
    0x41, 0x96, 0x8f, 0xb5, 0xbb, 0xa3, 0xef, 0xb2, 0x22, 0xb3, 0x95, 0x19,
    0x22, 0x1d, 0xef, 0x45, 0x4c, 0x70, 0x0b, 0x38, 0x24, 0x9d, 0x57, 0x3b,
    0x97, 0x2c, 0x4c, 0x63, 0x84, 0xa3, 0xd3, 0x12, 0x4f, 0x5f, 0xc8, 0xbb,
    0x89, 0xd9, 0x43, 0x57, 0x5b, 0x6f, 0x70, 0x9b, 0xf0, 0x54, 0x8d, 0x9c,
    0x01, 0x1d, 0x30, 0x5f, 0x02, 0x04, 0x10, 0x56, 0x8a, 0xa4, 0x58, 0xc3,
    0xbc, 0x2d, 0xc4, 0x7b, 0x73, 0x67, 0x9d, 0x73, 0x90, 0xeb, 0xcd, 0x30,
    0xc3, 0x28, 0x84, 0x48, 0xb5, 0x13, 0xcc, 0x44, 0xb0, 0x60, 0x28, 0xaa,
    0x94, 0x79, 0x76, 0xb7, 0xca, 0x19, 0x18, 0xea, 0x34, 0x21, 0x69, 0xb3,
    0xb3, 0x28, 0x5b, 0x30, 0xda, 0x57, 0x72, 0xbd, 0x02, 0x03, 0x01, 0x00,
    0x01, 0x02, 0x82, 0x02, 0x00, 0x3a, 0x38, 0x62, 0x79, 0x99, 0x41, 0xc2,
    0x89, 0xfb, 0x33, 0xb3, 0xba, 0x94, 0x72, 0x6b, 0x0a, 0x49, 0x10, 0x22,
    0x25, 0x25, 0xb5, 0xfd, 0x01, 0x26, 0x4a, 0xa5, 0x2e, 0x6b, 0x1e, 0x23,
    0xe2, 0x0b, 0x71, 0x32, 0x85, 0xd3, 0x33, 0x65, 0xce, 0x07, 0x25, 0x61,
    0xe0, 0x2c, 0xaa, 0xc1, 0x0c, 0x84, 0x92, 0xef, 0x25, 0x71, 0x5f, 0x9a,
    0x7c, 0x44, 0xc6, 0x20, 0x18, 0xd1, 0x1a, 0xc5, 0xaf, 0x74, 0x7d, 0x5a,
    0x33, 0xb5, 0xd0, 0x5f, 0x4a, 0xa6, 0xb1, 0xa1, 0xcd, 0xe4, 0x0c, 0x71,
    0x4e, 0xe1, 0x86, 0x60, 0x0d, 0x77, 0xd2, 0x13, 0xaa, 0x05, 0x10, 0x26,
    0x24, 0x79, 0x90, 0x91, 0xba, 0x7c, 0x26, 0x16, 0x15, 0x86, 0xa1, 0x40,
    0xde, 0x0f, 0x13, 0x52, 0x64, 0x01, 0xa1, 0xd9, 0xed, 0xf8, 0x44, 0x6e,
    0xb5, 0x80, 0x4b, 0x1d, 0x69, 0x8d, 0xc4, 0xe3, 0xd3, 0xe3, 0xce, 0x54,
    0xe0, 0xf9, 0x7c, 0x20, 0x2c, 0x41, 0xb7, 0x4c, 0x6d, 0x6d, 0x06, 0xbe,
    0x53, 0x94, 0xbb, 0xfe, 0xb5, 0x1a, 0x01, 0xa3, 0x2a, 0xa5, 0x40, 0x70,
    0x68, 0xeb, 0x00, 0x36, 0x5c, 0x0d, 0xd4, 0x35, 0xf8, 0x1c, 0x03, 0xa5,
    0x31, 0xf4, 0xa6, 0xd8, 0x3e, 0xb5, 0xa3, 0xa2, 0x68, 0x06, 0x49, 0xa7,
    0x98, 0x13, 0x95, 0x15, 0xb0, 0xc7, 0x75, 0x43, 0x97, 0xd2, 0xd3, 0x45,
    0x7a, 0xfd, 0xda, 0x40, 0x91, 0x43, 0xdb, 0x95, 0x4d, 0xf6, 0x1e, 0x50,
    0x91, 0x1e, 0xa4, 0x34, 0x0a, 0xf9, 0x2b, 0x43, 0x64, 0x9c, 0x3d, 0x03,
    0x8b, 0x64, 0x37, 0x42, 0x52, 0xb1, 0x7f, 0x21, 0xb2, 0x19, 0xe1, 0xba,
    0xf9, 0xd1, 0x04, 0x88, 0xfc, 0x0d, 0x44, 0x19, 0xd6, 0xbb, 0x63, 0x26,
    0xfa, 0xca, 0xe8, 0x30, 0xbe, 0x4b, 0x56, 0x0b, 0xed, 0xcf, 0xa9, 0xeb,
    0x33, 0x1c, 0x13, 0x36, 0xd0, 0x56, 0xd5, 0xce, 0x44, 0x90, 0x0b, 0x9e,
    0xab, 0xd0, 0x85, 0x5d, 0xe6, 0xff, 0xab, 0x46, 0x94, 0xa2, 0x2c, 0x92,
    0xe1, 0xcc, 0xfc, 0x61, 0xff, 0x4a, 0x43, 0xd9, 0x3f, 0x51, 0xfa, 0x86,
    0x16, 0xb2, 0xc6, 0x80, 0x23, 0xcf, 0x3c, 0x8f, 0x6d, 0xed, 0x62, 0xb0,
    0x3a, 0x36, 0x70, 0xf9, 0xab, 0x0a, 0xe3, 0xe0, 0xa1, 0xfd, 0x5a, 0x83,
    0x0b, 0x63, 0xc8, 0xb6, 0x7b, 0x38, 0x56, 0x57, 0xfc, 0x4e, 0xca, 0xdb,
    0x3d, 0x5b, 0x16, 0xb1, 0x27, 0xe2, 0x5b, 0x0e, 0x56, 0x6a, 0x81, 0x9f,
    0x65, 0x45, 0x7b, 0x67, 0xd8, 0xd8, 0x9b, 0x13, 0xbf, 0x2b, 0x22, 0xf2,
    0x8f, 0x2c, 0xc4, 0x1d, 0x58, 0xe8, 0xa8, 0x1d, 0x90, 0xd0, 0xb3, 0xc7,
    0xfc, 0xbd, 0x6d, 0x40, 0xa4, 0x13, 0x92, 0x98, 0xf7, 0xee, 0xa7, 0xb4,
    0x75, 0x1d, 0x94, 0x8d, 0xa1, 0x89, 0xfe, 0x8b, 0x4b, 0x38, 0x55, 0xcb,
    0x1e, 0x91, 0x41, 0xab, 0x27, 0x1f, 0x46, 0x2c, 0x66, 0xb7, 0xfa, 0x1f,
    0x87, 0xab, 0x79, 0x86, 0x57, 0x26, 0x35, 0x6b, 0x80, 0xe1, 0x4c, 0x92,
    0xa1, 0x88, 0xba, 0xf6, 0x80, 0xf9, 0xd6, 0x6f, 0x43, 0x77, 0x59, 0x02,
    0xe9, 0xa8, 0x57, 0xe0, 0x50, 0x3a, 0x78, 0xe0, 0xa5, 0x11, 0x0f, 0xf8,
    0x22, 0x89, 0x23, 0xde, 0xae, 0x08, 0x4e, 0x39, 0x5d, 0xc3, 0x32, 0xc4,
    0xe4, 0xc0, 0x9d, 0x58, 0x6f, 0x9a, 0x4c, 0xb7, 0xb5, 0x4e, 0x82, 0xff,
    0x55, 0x05, 0x84, 0xdf, 0x10, 0xd8, 0x7a, 0x9d, 0xc1, 0x19, 0xc8, 0xa4,
    0x66, 0xcd, 0x3b, 0xa4, 0x20, 0xe5, 0xa1, 0x85, 0x7e, 0x97, 0xf1, 0x34,
    0xe8, 0x12, 0x36, 0xaa, 0x8b, 0xa9, 0x2c, 0x74, 0x80, 0x82, 0x04, 0xe3,
    0xd8, 0x0c, 0x96, 0xfd, 0x35, 0xb8, 0x6f, 0x67, 0xdd, 0x81, 0x6d, 0x53,
    0xc6, 0xcd, 0x7b, 0x16, 0xf4, 0x62, 0x08, 0x4e, 0x9a, 0x1e, 0xbb, 0x20,
    0xbd, 0x02, 0x82, 0x01, 0x01, 0x00, 0xeb, 0x58, 0xc2, 0x77, 0x83, 0xa4,
    0xfc, 0xee, 0xaf, 0xda, 0x05, 0xaf, 0x94, 0xcb, 0x48, 0x1f, 0xe8, 0xb1,
    0xb6, 0xcc, 0x0d, 0x42, 0x51, 0x50, 0x10, 0xe1, 0x07, 0x0e, 0xa5, 0x38,
    0xed, 0x25, 0x8b, 0x0a, 0xca, 0x1f, 0x30, 0x0a, 0xc6, 0x6d, 0xcd, 0x72,
    0x08, 0x2c, 0x41, 0x8a, 0xed, 0x31, 0x47, 0xcd, 0x5f, 0xaf, 0x58, 0x04,
    0x1b, 0x40, 0x09, 0x0f, 0xf0, 0xca, 0x9e, 0xa3, 0xbf, 0xe2, 0x1d, 0x70,
    0x57, 0xa9, 0xb9, 0xd3, 0xc8, 0x27, 0xa3, 0xa7, 0x4d, 0x1a, 0xaf, 0x50,
    0x7c, 0x63, 0x28, 0x36, 0xa3, 0x45, 0x03, 0x1f, 0xcf, 0xdc, 0x17, 0x08,
    0x39, 0x45, 0x3d, 0x0b, 0x9d, 0xe1, 0x97, 0xfe, 0x9e, 0xcf, 0x35, 0x8b,
    0xdf, 0xeb, 0x84, 0x6e, 0x88, 0x85, 0x73, 0xe8, 0x08, 0x13, 0x61, 0x1a,
    0xa2, 0x59, 0x20, 0x99, 0xc4, 0x72, 0xc7, 0xe3, 0x72, 0xe0, 0xb3, 0x1d,
    0x49, 0x1f, 0x2b, 0x9f, 0x67, 0xb1, 0x0c, 0x73, 0xc8, 0x9b, 0x43, 0x95,
    0x0c, 0xc2, 0x01, 0x1c, 0xb3, 0x0a, 0x00, 0xd6, 0x16, 0x1c, 0xc2, 0x9f,
    0x58, 0x38, 0x8e, 0xc2, 0x31, 0xb7, 0x59, 0x32, 0x34, 0x67, 0xc1, 0xa1,
    0xd3, 0x09, 0xc9, 0xe3, 0x5d, 0xa0, 0xcf, 0x65, 0x4a, 0xf5, 0xe0, 0xb4,
    0x8a, 0x11, 0x90, 0x2a, 0x4c, 0xf3, 0x07, 0xaf, 0x88, 0x14, 0x5a, 0x77,
    0x58, 0x38, 0x72, 0xc2, 0xd2, 0x54, 0xf8, 0x87, 0xa1, 0x29, 0x25, 0x82,
    0x40, 0xf6, 0xe1, 0x79, 0x9a, 0xab, 0x23, 0xdc, 0xa7, 0xd6, 0xd5, 0x3a,
    0x19, 0xbd, 0xb5, 0x54, 0x51, 0x1a, 0xc9, 0x3a, 0x58, 0x00, 0x1a, 0xc8,
    0xc1, 0x14, 0xa5, 0x97, 0xff, 0x3e, 0x65, 0xc5, 0x31, 0x18, 0x9d, 0xac,
    0x49, 0x4f, 0x21, 0x02, 0x6d, 0x65, 0xe2, 0x8b, 0x7b, 0x9d, 0x94, 0xd0,
    0x7e, 0x4e, 0xfd, 0x3e, 0xac, 0x3e, 0x19, 0xa0, 0xea, 0xff, 0x02, 0x82,
    0x01, 0x01, 0x00, 0xe0, 0x93, 0xf0, 0x8f, 0xfb, 0x49, 0xf7, 0xd1, 0x7e,
    0x59, 0xad, 0xee, 0x65, 0x81, 0xac, 0x45, 0x99, 0xea, 0x13, 0x32, 0x89,
    0x47, 0x8b, 0x96, 0x95, 0x87, 0x19, 0x34, 0x2d, 0x92, 0xd0, 0x19, 0xd0,
    0xec, 0x3d, 0xa5, 0x80, 0xf9, 0x74, 0x49, 0x15, 0x87, 0xba, 0xdd, 0x41,
    0x4b, 0x2e, 0xbe, 0x27, 0x98, 0x3f, 0x7a, 0x69, 0xfb, 0x51, 0x67, 0xad,
    0x48, 0x03, 0xbf, 0x4b, 0xb5, 0xd7, 0x01, 0xab, 0xa7, 0xa3, 0x99, 0xd4,
    0x89, 0xad, 0xec, 0x80, 0x9b, 0x45, 0x65, 0x3b, 0xdf, 0xbd, 0x3c, 0x68,
    0xe3, 0xa5, 0x58, 0xfb, 0x0c, 0xed, 0xbc, 0x04, 0x2d, 0x33, 0x66, 0xa8,
    0x3b, 0x4f, 0x7b, 0xce, 0xe7, 0x58, 0xee, 0x3e, 0x83, 0x0d, 0x03, 0xfd,
    0x8e, 0xe1, 0x5c, 0x63, 0x77, 0x0e, 0xbd, 0x2b, 0x68, 0xa9, 0xd1, 0x95,
    0x28, 0x70, 0xd1, 0x81, 0x10, 0x8d, 0xb2, 0xe6, 0x48, 0x89, 0x92, 0x43,
    0x81, 0x21, 0xa1, 0x85, 0x3e, 0x9a, 0x6c, 0x53, 0x4f, 0xfb, 0xba, 0xe7,
    0x50, 0x15, 0x8e, 0xd9, 0xb3, 0x1b, 0x1a, 0x0c, 0x21, 0x71, 0xa7, 0x71,
    0x94, 0xa5, 0x71, 0xaa, 0xb4, 0x30, 0xb0, 0xfd, 0xe1, 0x95, 0xd7, 0xbb,
    0x48, 0x8e, 0xd1, 0x46, 0xb6, 0xb5, 0x32, 0xa9, 0xfe, 0x54, 0x7c, 0x80,
    0xb5, 0x5f, 0x6b, 0xa8, 0xe6, 0x45, 0xfb, 0xf4, 0x76, 0x9d, 0xcb, 0x91,
    0x5e, 0x87, 0x08, 0xa4, 0xf9, 0xc3, 0xc8, 0xe2, 0x89, 0xa6, 0xac, 0x6a,
    0x84, 0x51, 0x43, 0x73, 0x69, 0xda, 0x9e, 0xaf, 0xda, 0xad, 0xaa, 0x97,
    0xb5, 0x60, 0xd0, 0x71, 0xe2, 0x83, 0x88, 0x39, 0x5b, 0x91, 0x2b, 0x10,
    0xd5, 0x37, 0x71, 0x07, 0x8c, 0x3f, 0xed, 0xf0, 0xc7, 0x44, 0xa5, 0xc5,
    0xb3, 0xf4, 0x20, 0xa4, 0x7b, 0xda, 0x70, 0xc5, 0xcc, 0x72, 0x39, 0x0c,
    0x8f, 0xd0, 0xf6, 0x87, 0xa0, 0x0e, 0x43, 0x02, 0x82, 0x01, 0x00, 0x01,
    0xbe, 0xc8, 0xc2, 0x66, 0x21, 0x85, 0x16, 0xa8, 0x0b, 0x2f, 0xdb, 0x9b,
    0x78, 0xde, 0x72, 0x0e, 0x21, 0xb3, 0x3f, 0x54, 0x21, 0xd7, 0xc4, 0x86,
    0x3b, 0x84, 0xf7, 0xe0, 0xd5, 0xc9, 0x3c, 0x6c, 0x09, 0x8a, 0x72, 0x2c,
    0xc3, 0x07, 0xb1, 0xac, 0xc2, 0x59, 0xb9, 0x2a, 0x4b, 0x43, 0x73, 0x08,
    0x1b, 0x47, 0xc8, 0x5f, 0x18, 0xb8, 0xb3, 0x02, 0xde, 0x31, 0x64, 0xef,
    0x44, 0x3b, 0x9a, 0x0b, 0xa9, 0xd7, 0x9c, 0x94, 0x9a, 0x33, 0x73, 0xc7,
    0xcc, 0xe7, 0xcf, 0x78, 0xd9, 0x59, 0xf2, 0xca, 0x4b, 0x8d, 0x6e, 0x67,
    0x95, 0x86, 0xcf, 0x15, 0x04, 0xa4, 0x98, 0x14, 0xd9, 0xcf, 0x33, 0xeb,
    0x12, 0xa2, 0x4e, 0xdb, 0x10, 0xcc, 0x7a, 0x4c, 0xa3, 0x1d, 0x34, 0x10,
    0x25, 0xfa, 0x59, 0x5a, 0x70, 0xfe, 0x1f, 0x37, 0x14, 0xac, 0xd6, 0x45,
    0x11, 0x34, 0xba, 0xe1, 0xd9, 0x27, 0xbf, 0xa9, 0x6d, 0x27, 0x31, 0xb2,
    0xeb, 0xf0, 0xe2, 0xe5, 0xdf, 0x67, 0x16, 0xd1, 0x37, 0x4b, 0x44, 0x99,
    0xb8, 0xfc, 0xb4, 0xfd, 0xe4, 0x7c, 0x9c, 0xfe, 0xc2, 0x05, 0xe8, 0x5c,
    0x2a, 0xf9, 0x24, 0x83, 0xd5, 0x15, 0x61, 0x8f, 0x33, 0xb6, 0x70, 0x08,
    0xd9, 0xb1, 0x72, 0x9d, 0x55, 0xf9, 0x68, 0x23, 0xef, 0x8c, 0x5e, 0x89,
    0x02, 0x0e, 0x3a, 0x48, 0x69, 0x76, 0x28, 0x05, 0x01, 0xd8, 0xd9, 0x74,
    0x76, 0x5d, 0x05, 0x97, 0x17, 0x9e, 0x2f, 0xb6, 0x80, 0x56, 0x5b, 0x4a,
    0x8a, 0xca, 0x5b, 0xd7, 0x7c, 0xf4, 0xcf, 0xe9, 0x56, 0x54, 0xbb, 0xa4,
    0x1e, 0x60, 0xa4, 0xaf, 0x8e, 0x29, 0x90, 0x63, 0xa1, 0xfa, 0xec, 0x95,
    0x88, 0x9e, 0xd2, 0x95, 0xe8, 0xbf, 0x2a, 0x6d, 0x0e, 0x3d, 0x8d, 0x71,
    0xde, 0xa2, 0xee, 0x0a, 0x3a, 0x79, 0x95, 0x50, 0x5f, 0x74, 0x9b, 0x89,
    0x49, 0x1e, 0x35, 0x02, 0x82, 0x01, 0x00, 0x34, 0x16, 0x1b, 0xd5, 0x49,
    0x12, 0xfe, 0xc7, 0x37, 0xe6, 0xd4, 0xd0, 0x55, 0xfa, 0x9d, 0x5a, 0x07,
    0x38, 0xa2, 0xfb, 0x35, 0x9b, 0xc2, 0x64, 0x4a, 0x89, 0xea, 0xee, 0x8f,
    0x23, 0x5d, 0xe0, 0x9e, 0xf4, 0x2b, 0xd8, 0x16, 0xf1, 0xc4, 0x66, 0xae,
    0xf7, 0xab, 0xff, 0x65, 0x05, 0x6a, 0xf1, 0xef, 0x7d, 0x00, 0x3c, 0x04,
    0x18, 0xa5, 0xe8, 0xc5, 0xe7, 0xcd, 0xf6, 0xb0, 0x38, 0x9c, 0x85, 0x66,
    0xaa, 0x9a, 0xe7, 0x32, 0xc4, 0x3b, 0xf2, 0x7e, 0x61, 0x84, 0xd6, 0xd5,
    0xec, 0x2e, 0x97, 0xb4, 0x3c, 0x18, 0x3d, 0x6a, 0xfc, 0xb4, 0xa6, 0xc6,
    0xd1, 0x34, 0xfa, 0xba, 0x4a, 0x07, 0x45, 0x4f, 0xd7, 0x98, 0x68, 0xa9,
    0x56, 0xfb, 0xcd, 0xd1, 0x21, 0x32, 0x63, 0x9b, 0x2e, 0x21, 0xdc, 0xfe,
    0x14, 0x68, 0x4e, 0x93, 0xa9, 0xad, 0x80, 0xe9, 0xce, 0x4d, 0x0f, 0x11,
    0x1a, 0x01, 0xce, 0x4a, 0x99, 0xc8, 0x93, 0x0d, 0xb4, 0x57, 0x5c, 0x88,
    0x76, 0x24, 0x8c, 0x54, 0xd9, 0xde, 0x26, 0x23, 0x97, 0xc6, 0xd1, 0x63,
    0xbe, 0xdd, 0xfd, 0x57, 0xfa, 0x81, 0xe4, 0xbb, 0x12, 0xcf, 0xb8, 0x3d,
    0x29, 0xf4, 0xf6, 0xf4, 0x19, 0x00, 0x06, 0xc9, 0xbf, 0xd6, 0x86, 0xc9,
    0xa6, 0x93, 0x31, 0xcd, 0x28, 0x43, 0xd9, 0x54, 0x73, 0x14, 0x08, 0x3b,
    0xca, 0xc7, 0x0e, 0x4f, 0xc8, 0xfc, 0xc8, 0xa4, 0x7a, 0xc9, 0x4d, 0xee,
    0x3c, 0xbe, 0xcb, 0x7e, 0x68, 0xf1, 0xf0, 0x12, 0xf4, 0x9a, 0x1f, 0xf3,
    0xe9, 0x64, 0x1e, 0x0c, 0xd1, 0xa4, 0x82, 0xb3, 0xe7, 0x35, 0x5a, 0x82,
    0xf3, 0x19, 0xd8, 0x43, 0x2f, 0x30, 0x8c, 0xa6, 0x93, 0x80, 0xc0, 0x4e,
    0xf7, 0xe8, 0x94, 0x0a, 0x26, 0x92, 0x98, 0x7f, 0x8d, 0xba, 0x3c, 0x2d,
    0xa4, 0x1d, 0x59, 0xdd, 0xef, 0xfd, 0x27, 0x30, 0x8d, 0x8e, 0xc1, 0x02,
    0x82, 0x01, 0x01, 0x00, 0xd1, 0x5a, 0xe9, 0xae, 0x01, 0x90, 0x57, 0x32,
    0x32, 0x23, 0x7f, 0x35, 0x9a, 0x44, 0x94, 0x04, 0x12, 0x21, 0xc8, 0x90,
    0x34, 0x2c, 0x3f, 0xd5, 0x56, 0xb0, 0xe4, 0x86, 0x41, 0x91, 0x6e, 0xc9,
    0x49, 0x0c, 0x1e, 0xd4, 0x2e, 0xff, 0x4a, 0xf6, 0x39, 0x7d, 0x99, 0x59,
    0x11, 0x1a, 0xb4, 0x7a, 0xaf, 0x0b, 0x94, 0x36, 0xb0, 0x81, 0x71, 0x82,
    0xf8, 0xbc, 0x51, 0x1a, 0x07, 0x63, 0xa1, 0xfe, 0xb0, 0x0c, 0x0c, 0xf5,
    0x00, 0x03, 0x9a, 0x38, 0x0b, 0xf5, 0xef, 0xa0, 0xda, 0xc3, 0xcc, 0x5e,
    0xbd, 0xa6, 0x9e, 0x28, 0x3d, 0xd3, 0x4d, 0xdb, 0x5b, 0x68, 0xc7, 0x4b,
    0xe0, 0x7d, 0xdc, 0x45, 0x0f, 0xe1, 0xdf, 0xd4, 0x7a, 0xf4, 0x5c, 0x8a,
    0x01, 0x25, 0xc9, 0xdc, 0xc3, 0xe8, 0x2d, 0x09, 0xcd, 0xfb, 0x86, 0x60,
    0xea, 0x39, 0xc1, 0x95, 0xd9, 0x71, 0x97, 0xb7, 0x34, 0x89, 0xb9, 0xe1,
    0x6f, 0x30, 0x88, 0xe7, 0x8b, 0x90, 0xa4, 0x43, 0x4d, 0x39, 0x6d, 0x0c,
    0x2a, 0xa6, 0x70, 0x07, 0x19, 0xfd, 0xd5, 0xe7, 0x7a, 0xbc, 0x30, 0x9a,
    0xe0, 0xd9, 0xc3, 0xf4, 0x9f, 0x59, 0xe6, 0x11, 0x1e, 0x8d, 0xd2, 0x27,
    0x21, 0xf8, 0x0f, 0x68, 0x19, 0x8f, 0x85, 0xca, 0x90, 0x08, 0x19, 0x3e,
    0xee, 0x58, 0x69, 0xf0, 0xd0, 0x01, 0xcc, 0xc0, 0xe3, 0x77, 0x3e, 0xf9,
    0xd9, 0x4f, 0x05, 0x6a, 0xf5, 0xee, 0xcf, 0x20, 0x09, 0xc6, 0x6c, 0xc2,
    0xce, 0x0c, 0xc0, 0x57, 0xba, 0x44, 0x5d, 0x8b, 0x38, 0x9d, 0x16, 0x5f,
    0x81, 0xf9, 0x2b, 0xe6, 0xf6, 0xbf, 0xa9, 0x29, 0xce, 0x71, 0x75, 0x90,
    0xe0, 0x9f, 0x48, 0xeb, 0x7a, 0x87, 0x1d, 0x24, 0xb8, 0xd8, 0x00, 0xfd,
    0x3f, 0x9b, 0x68, 0x36, 0x45, 0x19, 0xd5, 0x91, 0x98, 0xf6, 0xd1, 0xcb,
    0xcf, 0x42, 0xc4, 0x2c, 0x5c, 0x61, 0x9e, 0x3d};
const unsigned int key1_priv_der_len = 2348;
const unsigned char key1_pub_der[] = {
    0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00,
    0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xce, 0x75, 0xab,
    0x47, 0xd1, 0xb9, 0xa8, 0x09, 0x2a, 0x9e, 0x50, 0x74, 0xe9, 0xf2, 0x8e,
    0x6f, 0xc9, 0x9f, 0x62, 0x7d, 0xf7, 0xfb, 0x45, 0xc2, 0xca, 0xb5, 0x50,
    0xf3, 0xcc, 0xeb, 0xdb, 0xee, 0x89, 0x7c, 0x2e, 0xea, 0xd0, 0xfd, 0x3a,
    0xcb, 0x47, 0x42, 0xbd, 0x52, 0xe9, 0x80, 0xd5, 0x88, 0x88, 0xd9, 0xce,
    0x54, 0xeb, 0x9c, 0x43, 0x5f, 0xea, 0x50, 0x28, 0xfc, 0xca, 0x03, 0x47,
    0xb0, 0x05, 0x46, 0x64, 0x54, 0xd4, 0x8c, 0x16, 0x5f, 0x14, 0x93, 0x01,
    0x48, 0x19, 0x13, 0xac, 0xc4, 0x76, 0x25, 0xd6, 0x86, 0x55, 0xe7, 0x79,
    0x86, 0x87, 0x08, 0x42, 0x38, 0xb4, 0xcf, 0xc5, 0x6b, 0x9d, 0x6f, 0xc6,
    0x89, 0x48, 0xaa, 0x35, 0x0b, 0x3b, 0xb5, 0x29, 0xeb, 0xbf, 0xa4, 0x2e,
    0xb4, 0xe9, 0x22, 0xc4, 0xb2, 0xc9, 0xe3, 0x75, 0xee, 0x90, 0x11, 0x4f,
    0x3b, 0x12, 0xf0, 0x57, 0xc1, 0xcf, 0x2c, 0x40, 0xaa, 0xaf, 0x00, 0x35,
    0xb3, 0x5c, 0xe1, 0x64, 0x4e, 0xaa, 0xad, 0xe4, 0x1d, 0xfc, 0x5a, 0x71,
    0x49, 0x3d, 0xdd, 0x4f, 0x4b, 0x4e, 0x35, 0xe7, 0x43, 0x8f, 0x23, 0x15,
    0xa0, 0xa4, 0x64, 0x95, 0x2e, 0x63, 0x70, 0xf2, 0xc3, 0xdd, 0xd8, 0x77,
    0x82, 0xc9, 0x75, 0xc1, 0x37, 0xfe, 0x13, 0xa8, 0xec, 0x8d, 0xc3, 0x3b,
    0x50, 0xd5, 0x24, 0x9d, 0x80, 0x69, 0xca, 0xa5, 0xcd, 0x72, 0x23, 0x8f,
    0x7c, 0xba, 0xd7, 0x28, 0xe5, 0xb6, 0x2f, 0xd3, 0xa9, 0x78, 0x16, 0x39,
    0xfb, 0xa5, 0x35, 0x57, 0x5e, 0xde, 0x95, 0x7f, 0xba, 0xae, 0x88, 0x99,
    0x0d, 0xff, 0xa3, 0x33, 0xfb, 0x03, 0x5e, 0xf4, 0xb7, 0xfc, 0x91, 0x1a,
    0x11, 0x38, 0xa3, 0xb5, 0x72, 0x8a, 0x88, 0xc5, 0x3b, 0x7e, 0xe7, 0x4a,
    0xa5, 0x94, 0xf9, 0xa7, 0x63, 0x84, 0x5c, 0x67, 0xd4, 0x31, 0xe5, 0xab,
    0x2e, 0x9c, 0xc2, 0xc7, 0x70, 0x7b, 0xb8, 0xe5, 0xb6, 0x61, 0x91, 0xb8,
    0x13, 0x82, 0x54, 0xab, 0xca, 0x08, 0x64, 0xf2, 0xcf, 0xde, 0x60, 0x93,
    0xb5, 0x81, 0x8b, 0x53, 0x36, 0x45, 0x85, 0x7a, 0xfb, 0xc7, 0xbd, 0x38,
    0x96, 0xfa, 0x22, 0xe0, 0xec, 0x87, 0xf4, 0xd1, 0x75, 0x18, 0x0c, 0xb8,
    0xa0, 0xc4, 0xe2, 0x8f, 0x1b, 0x72, 0x3d, 0x2e, 0x3c, 0x9e, 0x94, 0xcc,
    0x47, 0xa1, 0x56, 0x87, 0x4f, 0x24, 0xc0, 0xe2, 0x13, 0x31, 0x19, 0x2a,
    0x93, 0xde, 0x8e, 0x97, 0x4e, 0x0c, 0xb1, 0x2a, 0x27, 0x6f, 0x22, 0xe7,
    0x8f, 0x24, 0x4f, 0xa4, 0xc2, 0x54, 0xf6, 0x42, 0xba, 0x4d, 0x43, 0xcc,
    0xba, 0x7a, 0x49, 0x1d, 0xd3, 0x9b, 0xc9, 0x31, 0xf7, 0x08, 0x4b, 0x84,
    0xdf, 0x94, 0x04, 0x86, 0xa0, 0x42, 0xd7, 0xcf, 0xd8, 0x88, 0xcb, 0xc5,
    0x1d, 0xfe, 0x23, 0x69, 0x0a, 0x3b, 0xc6, 0x60, 0xa8, 0xf6, 0x69, 0x13,
    0x3e, 0xfc, 0xd0, 0x09, 0x8a, 0xdd, 0x92, 0x12, 0x11, 0xac, 0x3e, 0xdf,
    0xb4, 0xdc, 0x1b, 0x82, 0xb8, 0x9b, 0x42, 0x0b, 0xa1, 0x41, 0x96, 0x8f,
    0xb5, 0xbb, 0xa3, 0xef, 0xb2, 0x22, 0xb3, 0x95, 0x19, 0x22, 0x1d, 0xef,
    0x45, 0x4c, 0x70, 0x0b, 0x38, 0x24, 0x9d, 0x57, 0x3b, 0x97, 0x2c, 0x4c,
    0x63, 0x84, 0xa3, 0xd3, 0x12, 0x4f, 0x5f, 0xc8, 0xbb, 0x89, 0xd9, 0x43,
    0x57, 0x5b, 0x6f, 0x70, 0x9b, 0xf0, 0x54, 0x8d, 0x9c, 0x01, 0x1d, 0x30,
    0x5f, 0x02, 0x04, 0x10, 0x56, 0x8a, 0xa4, 0x58, 0xc3, 0xbc, 0x2d, 0xc4,
    0x7b, 0x73, 0x67, 0x9d, 0x73, 0x90, 0xeb, 0xcd, 0x30, 0xc3, 0x28, 0x84,
    0x48, 0xb5, 0x13, 0xcc, 0x44, 0xb0, 0x60, 0x28, 0xaa, 0x94, 0x79, 0x76,
    0xb7, 0xca, 0x19, 0x18, 0xea, 0x34, 0x21, 0x69, 0xb3, 0xb3, 0x28, 0x5b,
    0x30, 0xda, 0x57, 0x72, 0xbd, 0x02, 0x03, 0x01, 0x00, 0x01};
const unsigned int key1_pub_der_len = 550;

/*
const unsigned char key2_priv_der[] = {
    0x30, 0x82, 0x09, 0x2b, 0x02, 0x01, 0x00, 0x02, 0x82, 0x02, 0x01, 0x00,
    0xda, 0x13, 0xd5, 0xca, 0x19, 0x7a, 0x7c, 0x3f, 0x47, 0x03, 0xf2, 0xeb,
    0x7f, 0x9c, 0x5e, 0xc5, 0x46, 0x22, 0xec, 0x10, 0x60, 0x84, 0xe7, 0x5f,
    0xf7, 0x55, 0x3e, 0x7a, 0xfc, 0xfc, 0x9e, 0x05, 0x4f, 0x31, 0xf4, 0xd5,
    0xfa, 0xec, 0xd0, 0xeb, 0x1a, 0x04, 0x86, 0x8d, 0x8c, 0xc4, 0x85, 0x2c,
    0x41, 0x1f, 0xc4, 0xdc, 0x83, 0xd8, 0x41, 0x13, 0x38, 0x18, 0x12, 0x5d,
    0xcb, 0x65, 0x26, 0x65, 0xc2, 0x15, 0x31, 0x9e, 0xc4, 0x65, 0x64, 0xd1,
    0xf5, 0x84, 0xf2, 0x6d, 0x58, 0x11, 0x82, 0x53, 0x26, 0x0b, 0x5d, 0x96,
    0x91, 0x9a, 0x79, 0xe7, 0x35, 0x0e, 0x77, 0xce, 0xea, 0x54, 0x29, 0x73,
    0x85, 0xc3, 0x36, 0xe4, 0xf9, 0xfa, 0x96, 0xb8, 0xe5, 0x71, 0x3d, 0xda,
    0x85, 0x0f, 0xa4, 0xcf, 0x83, 0x50, 0x6d, 0x4b, 0x02, 0xaf, 0xc6, 0xe3,
    0x37, 0x3a, 0xb5, 0xc9, 0x73, 0x30, 0x38, 0x72, 0xd9, 0xe7, 0xde, 0x2a,
    0xe5, 0x11, 0x83, 0x0d, 0xa8, 0x19, 0xb4, 0x84, 0xe2, 0x3b, 0xdf, 0xa4,
    0x39, 0x03, 0x92, 0xfb, 0xfc, 0x6d, 0x00, 0xad, 0xed, 0xa7, 0x88, 0x84,
    0xb9, 0xbd, 0x8a, 0xa6, 0xbd, 0xf5, 0xc4, 0xee, 0xa6, 0x6f, 0xb3, 0xf8,
    0x3f, 0xa8, 0x6d, 0xfa, 0x7d, 0x3a, 0xf6, 0x9a, 0x79, 0x4a, 0x53, 0x53,
    0xd1, 0x97, 0x50, 0x8c, 0x72, 0xf3, 0xa8, 0xd7, 0x9e, 0xac, 0x2b, 0x58,
    0x84, 0xa0, 0x23, 0x5c, 0x08, 0xc8, 0x10, 0x33, 0x58, 0x5e, 0x95, 0x5c,
    0x1d, 0x07, 0xb6, 0x0d, 0xe6, 0x68, 0x8c, 0xce, 0x20, 0x08, 0x7c, 0xf9,
    0x23, 0x2f, 0x6b, 0xf0, 0xd7, 0x89, 0x81, 0x40, 0x79, 0x23, 0xf5, 0x1c,
    0x73, 0x76, 0xf9, 0x28, 0x22, 0x80, 0xd7, 0x99, 0xfa, 0x2e, 0x69, 0xf3,
    0x74, 0xae, 0xde, 0xe3, 0x6a, 0x38, 0x4e, 0xa2, 0x33, 0xaf, 0xb8, 0x7f,
    0x78, 0xa8, 0xa6, 0x23, 0xb4, 0x85, 0xc7, 0xac, 0xe4, 0xca, 0x14, 0x5b,
    0xe7, 0x9b, 0xa4, 0x34, 0xe4, 0xbd, 0x48, 0x22, 0x89, 0x7f, 0xf8, 0xf5,
    0xd2, 0x14, 0x7f, 0x30, 0x65, 0x3b, 0x22, 0xf6, 0x45, 0x68, 0xeb, 0x17,
    0xbb, 0xc9, 0x43, 0xeb, 0xbc, 0x50, 0xa1, 0x30, 0x3d, 0x5c, 0xb1, 0xff,
    0xfa, 0x9c, 0x60, 0x1a, 0x03, 0xfe, 0xbd, 0x73, 0xa9, 0x8b, 0x88, 0x4a,
    0x44, 0x40, 0x26, 0x50, 0xcc, 0xe3, 0x86, 0x88, 0x9f, 0x82, 0xf1, 0x62,
    0x94, 0x43, 0x57, 0xfb, 0x7f, 0xfb, 0x49, 0xda, 0xeb, 0x26, 0x6d, 0x9a,
    0x1e, 0x24, 0x8d, 0x7c, 0x32, 0x79, 0x64, 0x8a, 0x91, 0x2c, 0xff, 0xbd,
    0x1a, 0x41, 0x86, 0x88, 0x41, 0x20, 0x6c, 0x3a, 0xea, 0x17, 0x44, 0x34,
    0x6f, 0x5b, 0x9c, 0x82, 0x7a, 0xfc, 0x3b, 0xbd, 0xdd, 0xec, 0xb5, 0x90,
    0x1b, 0x6a, 0xb6, 0xc0, 0x0d, 0x7e, 0x4c, 0xe9, 0x3e, 0x43, 0x4d, 0xe6,
    0xe7, 0x7d, 0x5a, 0x69, 0xff, 0x81, 0x10, 0xe1, 0x2a, 0x60, 0x8a, 0x30,
    0xe9, 0x29, 0x7a, 0x55, 0xc0, 0x6b, 0x5d, 0x17, 0xcd, 0xc6, 0x9c, 0x1e,
    0x7e, 0xa8, 0x0c, 0xf6, 0x80, 0x80, 0xd8, 0x6f, 0xa4, 0xa3, 0x3f, 0xb2,
    0xc5, 0xa7, 0x20, 0xba, 0x1c, 0xab, 0xb8, 0x23, 0x84, 0x07, 0x01, 0x03,
    0x3e, 0x71, 0x87, 0x25, 0x48, 0x9d, 0xb5, 0x11, 0x9f, 0xcf, 0xc6, 0xa6,
    0x1b, 0x28, 0xba, 0xfc, 0xd8, 0x73, 0x1f, 0x40, 0x8c, 0xed, 0x90, 0xa4,
    0x0b, 0x75, 0x8c, 0xea, 0x09, 0x1f, 0xb6, 0x10, 0xaf, 0x80, 0x4d, 0x1a,
    0xe2, 0xac, 0x6c, 0x8f, 0x17, 0x14, 0xff, 0x07, 0x5b, 0xd9, 0x7a, 0xa4,
    0x74, 0x04, 0xa8, 0xef, 0xc1, 0xe2, 0xd4, 0xdb, 0x42, 0x06, 0x20, 0x3d,
    0x0a, 0x59, 0xc9, 0x93, 0x25, 0x59, 0x38, 0xaa, 0x10, 0xa4, 0xea, 0x24,
    0x8d, 0xe7, 0x0a, 0xa7, 0x61, 0x1c, 0x40, 0x83, 0x02, 0x03, 0x01, 0x00,
    0x01, 0x02, 0x82, 0x02, 0x01, 0x00, 0xc5, 0x25, 0xaf, 0x5d, 0x60, 0x41,
    0x31, 0xf7, 0xc6, 0x8c, 0x94, 0x5c, 0x3f, 0xe6, 0x2e, 0x6a, 0xeb, 0x68,
    0x00, 0xbf, 0x21, 0x72, 0xa4, 0xf5, 0x45, 0xd4, 0xe3, 0x82, 0x2e, 0x19,
    0x76, 0x05, 0xd8, 0xbd, 0x91, 0xd8, 0xac, 0x5a, 0xd0, 0xd7, 0xe9, 0x92,
    0x73, 0xcd, 0x9d, 0x97, 0xbf, 0xc8, 0xed, 0x2a, 0xfa, 0x3e, 0x5c, 0x56,
    0xf1, 0x25, 0x9d, 0xcd, 0x6d, 0x35, 0x2b, 0xfe, 0x4a, 0x83, 0x2d, 0xbd,
    0x19, 0x39, 0xad, 0xd4, 0xf8, 0x1b, 0x33, 0x79, 0x37, 0xec, 0x8f, 0xf4,
    0x6c, 0x3c, 0x1d, 0x25, 0xa3, 0x3a, 0xce, 0x70, 0xb7, 0x89, 0xc4, 0x96,
    0x4a, 0xcb, 0x5d, 0x5e, 0x2e, 0x87, 0x08, 0x43, 0x1d, 0xea, 0x4c, 0xef,
    0x34, 0xb8, 0xfc, 0x7b, 0xae, 0x6e, 0x51, 0x62, 0x7e, 0x1d, 0x37, 0x5a,
    0x4b, 0x23, 0xc7, 0xce, 0xfe, 0xdf, 0x44, 0x7b, 0xa8, 0x01, 0xf1, 0x47,
    0x83, 0x90, 0x98, 0xdc, 0x1c, 0x25, 0xed, 0x26, 0x32, 0xb2, 0xf2, 0xe8,
    0x22, 0x21, 0x0b, 0xa1, 0x13, 0x22, 0x14, 0x84, 0xdd, 0xa9, 0x3e, 0x5f,
    0x90, 0x80, 0xac, 0x5b, 0x8b, 0x78, 0x69, 0xae, 0x27, 0x9d, 0x6c, 0x17,
    0xb6, 0x2c, 0x05, 0x7c, 0xf0, 0x57, 0x19, 0xbd, 0x7b, 0x87, 0x3b, 0x15,
    0x46, 0x01, 0x0a, 0x6b, 0x9d, 0xff, 0x25, 0x78, 0x44, 0xd2, 0x63, 0xcd,
    0x51, 0x33, 0x74, 0x77, 0xb3, 0x4b, 0xf7, 0xc2, 0x09, 0x95, 0x57, 0x3e,
    0xfe, 0x1e, 0x5c, 0xe2, 0x4c, 0xe6, 0x94, 0x3b, 0xf7, 0x62, 0x83, 0x8c,
    0xba, 0xd6, 0x51, 0x71, 0x3b, 0x01, 0xc3, 0xc4, 0x48, 0x31, 0xd7, 0xb8,
    0xb0, 0x87, 0x87, 0xbc, 0x71, 0x07, 0x82, 0x7e, 0xe8, 0xea, 0x56, 0x9e,
    0xe1, 0xca, 0x8a, 0xb8, 0xd1, 0x01, 0xcd, 0xd7, 0x95, 0x1a, 0x44, 0x59,
    0x99, 0x04, 0xdb, 0xf3, 0x1c, 0xb8, 0xe8, 0x6c, 0x96, 0x9b, 0xff, 0x83,
    0xdf, 0x88, 0x67, 0x26, 0x04, 0x0e, 0x36, 0x3e, 0xee, 0x62, 0x08, 0xb5,
    0x9f, 0xbe, 0xd6, 0x43, 0xa3, 0xb6, 0xec, 0x16, 0x4c, 0x6f, 0x11, 0xbe,
    0x70, 0xd9, 0xf0, 0x9e, 0x4a, 0xc2, 0x1a, 0x77, 0x78, 0xf1, 0xd9, 0x8a,
    0xcd, 0x88, 0x59, 0x73, 0x7b, 0x65, 0x63, 0xa7, 0x06, 0x8b, 0x4a, 0xeb,
    0x65, 0xc5, 0xda, 0xac, 0x21, 0xc3, 0x1e, 0x21, 0xe1, 0xff, 0x10, 0xa7,
    0x0a, 0x06, 0xd5, 0x3b, 0x1c, 0x96, 0x0d, 0xc3, 0xb4, 0x19, 0xa9, 0x35,
    0xc1, 0xb3, 0x1f, 0x95, 0x8b, 0xca, 0xf7, 0x8f, 0xe8, 0xf9, 0xa9, 0x5f,
    0x91, 0x84, 0xb7, 0x24, 0x08, 0x08, 0x59, 0xfb, 0x37, 0xd2, 0xc7, 0x5c,
    0x7f, 0x40, 0xde, 0x84, 0xcb, 0x69, 0x19, 0x7f, 0x30, 0x8f, 0xd5, 0x9c,
    0x2c, 0xc0, 0xb1, 0xfb, 0x79, 0x15, 0x63, 0x69, 0x8c, 0x4c, 0x0b, 0x0c,
    0x88, 0x36, 0x2e, 0xbd, 0xa7, 0x99, 0x26, 0x80, 0x47, 0x4a, 0xda, 0x26,
    0xda, 0x9d, 0xf7, 0x26, 0x7f, 0xba, 0xaf, 0xfa, 0xd7, 0xb5, 0x62, 0x9f,
    0xd6, 0x84, 0x86, 0xdf, 0xbb, 0xe2, 0x34, 0x5d, 0x70, 0x8e, 0x28, 0xd9,
    0x67, 0x0e, 0x99, 0x37, 0x6e, 0x45, 0x88, 0x65, 0xdb, 0x3a, 0x16, 0xf2,
    0x1e, 0xea, 0x70, 0x9e, 0x14, 0x5a, 0x3b, 0xe0, 0x35, 0x79, 0x84, 0x66,
    0xdf, 0x48, 0xee, 0xcd, 0x31, 0x5f, 0xa3, 0xbb, 0x38, 0xbb, 0x25, 0x13,
    0xa1, 0xba, 0x4b, 0x26, 0x25, 0xa0, 0x3b, 0x3e, 0x9b, 0x8d, 0x67, 0x92,
    0x96, 0x10, 0xd1, 0x79, 0x72, 0x61, 0x74, 0x87, 0x91, 0xf2, 0x90, 0x92,
    0x2a, 0x2f, 0x5c, 0x95, 0x0c, 0x25, 0x30, 0xe1, 0x1e, 0xfd, 0x96, 0x08,
    0x90, 0xa3, 0x4b, 0xd2, 0x96, 0xf8, 0x9a, 0xc1, 0xeb, 0x69, 0x63, 0xd7,
    0xdf, 0x6d, 0xe4, 0xa7, 0xa3, 0xc5, 0x70, 0x4f, 0xe7, 0xd9, 0xb3, 0x66,
    0xb6, 0x69, 0x02, 0x82, 0x01, 0x01, 0x00, 0xef, 0x89, 0x6f, 0x76, 0x64,
    0x05, 0x76, 0x76, 0x9f, 0xb8, 0xe1, 0x5c, 0x5c, 0xda, 0x65, 0x74, 0xc2,
    0x37, 0x46, 0x9b, 0xb1, 0x83, 0x03, 0x59, 0x41, 0x4b, 0xd9, 0xc4, 0x27,
    0x9c, 0x33, 0x9f, 0xa8, 0x50, 0xc0, 0xbf, 0xb3, 0x4c, 0xee, 0x6c, 0x74,
    0x0f, 0x08, 0x87, 0xbd, 0x6f, 0xfd, 0x90, 0x07, 0x55, 0xf7, 0x4c, 0xf4,
    0x43, 0xfc, 0x26, 0x8b, 0x42, 0xfe, 0x80, 0xb5, 0x30, 0x09, 0xfb, 0x0b,
    0x6b, 0xa8, 0x0d, 0xe1, 0x29, 0x0d, 0x59, 0x35, 0x70, 0xd8, 0x64, 0x88,
    0xa5, 0x1b, 0x2b, 0x19, 0xf7, 0xca, 0xa7, 0xab, 0x03, 0x85, 0x6c, 0x1f,
    0x65, 0x5f, 0x70, 0xe4, 0x29, 0xd0, 0xb4, 0x27, 0x31, 0xac, 0xdf, 0xf3,
    0x0b, 0xd9, 0x05, 0x05, 0xf1, 0x74, 0x45, 0x41, 0x64, 0x21, 0x1a, 0x3a,
    0xa5, 0x5c, 0xa9, 0x68, 0x5a, 0xe3, 0x63, 0x6e, 0x46, 0x7e, 0x13, 0x3f,
    0x93, 0x1e, 0x6d, 0x25, 0xd9, 0xa8, 0xe8, 0xe9, 0xf3, 0x36, 0x86, 0x23,
    0xb9, 0x07, 0xd3, 0x33, 0xb0, 0x19, 0xc3, 0xc9, 0x7e, 0xc4, 0xab, 0x0c,
    0xe9, 0x15, 0x10, 0x4e, 0x53, 0xcf, 0x36, 0x07, 0x62, 0xcb, 0x58, 0x90,
    0x4a, 0xb1, 0x70, 0x51, 0x22, 0x2e, 0x55, 0xa8, 0x64, 0x6e, 0x59, 0x44,
    0x0d, 0x7f, 0x65, 0x9f, 0x54, 0x1e, 0xd0, 0x58, 0x6e, 0x72, 0x60, 0x80,
    0xab, 0x66, 0xa4, 0xde, 0x17, 0xa8, 0xe1, 0xa6, 0xce, 0x49, 0xcc, 0xf8,
    0x05, 0x1f, 0x87, 0xbe, 0x36, 0x85, 0xfc, 0x1e, 0x36, 0x74, 0x6e, 0x09,
    0x0c, 0xdc, 0x2e, 0xd4, 0xb0, 0xa7, 0x98, 0x92, 0xf5, 0x44, 0x4d, 0xe2,
    0xca, 0xc1, 0x33, 0x4f, 0x30, 0x4e, 0xd9, 0x35, 0xdf, 0x60, 0xc8, 0xb7,
    0xd4, 0x37, 0xd9, 0xa2, 0xa8, 0x71, 0x01, 0x51, 0x34, 0xe2, 0xef, 0xf2,
    0x9e, 0xed, 0xe7, 0x00, 0x9c, 0xc0, 0x4e, 0x1d, 0x65, 0xe3, 0x27, 0x02,
    0x82, 0x01, 0x01, 0x00, 0xe9, 0x10, 0xd4, 0x69, 0x56, 0xf6, 0x29, 0xe0,
    0xee, 0xc4, 0x48, 0x7b, 0x8a, 0x5a, 0xdf, 0xed, 0xc2, 0x04, 0xe1, 0x5e,
    0x9e, 0x13, 0x8b, 0x73, 0x3f, 0xca, 0x10, 0x2b, 0xd9, 0x5d, 0x46, 0x5e,
    0x31, 0x63, 0xf4, 0xc4, 0x54, 0xe7, 0x5f, 0xe0, 0x5d, 0x63, 0xc8, 0x03,
    0xbf, 0x58, 0xdf, 0x3a, 0xe0, 0xc6, 0x08, 0x39, 0xa8, 0x5b, 0x12, 0x58,
    0x6d, 0xe8, 0xb6, 0x7a, 0xf8, 0xf5, 0x1f, 0x4f, 0x07, 0x32, 0x0b, 0xe9,
    0xb7, 0x93, 0x6c, 0x8f, 0x5e, 0x5f, 0x34, 0x54, 0xb9, 0x4a, 0xaf, 0xde,
    0xea, 0xd3, 0x1f, 0x2d, 0x9d, 0xa6, 0xcc, 0x29, 0x74, 0x9f, 0xc0, 0x90,
    0x81, 0xdd, 0x9c, 0xc4, 0x71, 0x0b, 0x82, 0x4e, 0xe3, 0x9c, 0x55, 0x48,
    0x75, 0xdc, 0xa6, 0xe7, 0xf3, 0x8e, 0x87, 0x03, 0x19, 0xb7, 0xce, 0x90,
    0x64, 0x4b, 0xe8, 0xae, 0xcf, 0xff, 0x97, 0x8d, 0x22, 0xdb, 0xef, 0xf6,
    0xb0, 0xb7, 0x8a, 0x46, 0x36, 0xe4, 0x1d, 0xc4, 0x40, 0xf4, 0x43, 0x05,
    0x5c, 0x5e, 0xe5, 0x54, 0x22, 0xac, 0x1a, 0xff, 0x0f, 0xbc, 0xe1, 0x43,
    0x53, 0x78, 0xf1, 0x77, 0xdb, 0xd6, 0xb7, 0xc8, 0x61, 0xc1, 0x2e, 0x01,
    0xec, 0x8d, 0x54, 0xbc, 0x76, 0x20, 0x7c, 0xba, 0x04, 0xb0, 0x91, 0xdb,
    0x49, 0xd1, 0x8a, 0x2e, 0xcf, 0xa9, 0xf4, 0x22, 0x72, 0x03, 0x10, 0x82,
    0x7f, 0x64, 0x9b, 0xe0, 0x58, 0x1c, 0x04, 0x92, 0x37, 0xa3, 0xbb, 0x61,
    0x79, 0xb9, 0xe6, 0xb5, 0x5a, 0x2d, 0xb4, 0x8a, 0x04, 0xce, 0x1e, 0xb8,
    0xc9, 0xa0, 0x77, 0x82, 0xa6, 0x2b, 0x60, 0x10, 0xc8, 0x28, 0x89, 0xe0,
    0x64, 0xd0, 0xf7, 0x02, 0xe0, 0xcc, 0x23, 0x84, 0xc2, 0xba, 0xe2, 0xa4,
    0x03, 0x21, 0x5d, 0x4a, 0x81, 0xc4, 0x6c, 0x3d, 0x69, 0x5e, 0x6b, 0x51,
    0x3b, 0xb4, 0xb6, 0x9d, 0x5d, 0x72, 0x21, 0x45, 0x02, 0x82, 0x01, 0x01,
    0x00, 0xc1, 0xda, 0x69, 0xf8, 0x58, 0x2e, 0x0b, 0x97, 0x28, 0xe0, 0x08,
    0x92, 0x25, 0x1b, 0x22, 0x2c, 0x81, 0xd9, 0x16, 0x2d, 0x7e, 0x55, 0x56,
    0xea, 0x6e, 0xeb, 0xa1, 0xcb, 0x1b, 0x7b, 0x50, 0x54, 0x0f, 0x75, 0x7a,
    0xe8, 0x29, 0x85, 0x43, 0x17, 0x46, 0x3d, 0xbc, 0x5b, 0x8e, 0x36, 0x09,
    0xf0, 0xfb, 0xde, 0xd8, 0x8a, 0xd0, 0xcc, 0x0c, 0x4e, 0x6d, 0x39, 0xc4,
    0x9a, 0x09, 0x08, 0x5d, 0xab, 0x6b, 0xac, 0xae, 0x8e, 0xbc, 0xff, 0xea,
    0x2b, 0x9e, 0x12, 0x3b, 0x2d, 0xf1, 0x60, 0x1d, 0x42, 0x9e, 0x7b, 0x68,
    0xe8, 0x94, 0x7f, 0xff, 0x04, 0x67, 0xcc, 0x34, 0x97, 0x3a, 0x2f, 0x95,
    0x15, 0x96, 0xfa, 0x9e, 0xbb, 0x87, 0x08, 0xb9, 0x93, 0x55, 0x21, 0xf9,
    0x44, 0xeb, 0x0c, 0xcb, 0xb5, 0x5c, 0x6c, 0xe3, 0x36, 0xbe, 0x9b, 0x7f,
    0x96, 0xc2, 0x72, 0x0e, 0x2a, 0x29, 0xb3, 0x38, 0x56, 0x80, 0xe1, 0x4b,
    0xcf, 0x63, 0x36, 0x4f, 0x93, 0xf3, 0x69, 0x15, 0x2a, 0x19, 0x94, 0x94,
    0xe5, 0x5c, 0x36, 0x59, 0x97, 0x4c, 0x95, 0x7d, 0x54, 0x7a, 0xef, 0x5c,
    0xac, 0x8f, 0x01, 0xa7, 0x2b, 0x7f, 0x6a, 0xd3, 0x7a, 0xe0, 0x4e, 0x57,
    0x4d, 0x3f, 0x40, 0x38, 0x05, 0xca, 0x0b, 0x5a, 0x64, 0xb5, 0xb2, 0xf0,
    0x55, 0x10, 0x9c, 0x21, 0xb8, 0x73, 0xa9, 0x43, 0x22, 0x7e, 0x12, 0x8b,
    0xbc, 0x42, 0xb0, 0x84, 0x0d, 0x7b, 0x53, 0x3a, 0x17, 0x33, 0x1b, 0x11,
    0x07, 0xde, 0xb3, 0x97, 0x3a, 0x4d, 0xdc, 0xb8, 0x7c, 0xb5, 0xe8, 0x59,
    0x5a, 0x22, 0xe4, 0x97, 0x68, 0xa8, 0xf8, 0x09, 0xaf, 0x2a, 0x91, 0x1f,
    0xde, 0xad, 0xb8, 0x9f, 0xad, 0x11, 0x08, 0x90, 0x42, 0x73, 0x5e, 0xfa,
    0x45, 0x64, 0xa0, 0xf6, 0x5f, 0xd5, 0xec, 0x45, 0x00, 0x44, 0x00, 0x97,
    0xa9, 0x20, 0x25, 0x8a, 0xd5, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd8, 0xdc,
    0x24, 0x08, 0xf0, 0x35, 0x94, 0xba, 0x0a, 0xf0, 0xf0, 0x50, 0xa3, 0x67,
    0xf3, 0x3c, 0x93, 0x6f, 0x5f, 0x14, 0x5f, 0x19, 0xe8, 0x83, 0x90, 0x33,
    0x3f, 0xe0, 0xcd, 0x1c, 0x11, 0x41, 0xcb, 0xcb, 0x2a, 0x11, 0x14, 0xbf,
    0x45, 0x62, 0xcb, 0x02, 0xf1, 0x35, 0x2b, 0x72, 0x52, 0x23, 0xc2, 0xca,
    0x01, 0x15, 0x45, 0x25, 0x98, 0x68, 0x57, 0xbc, 0x55, 0x2f, 0x0f, 0x3f,
    0x65, 0xa6, 0x6f, 0x17, 0x8e, 0x26, 0x25, 0xfe, 0x32, 0xe1, 0x23, 0xfa,
    0x8a, 0x02, 0xdb, 0x76, 0x37, 0x36, 0xc0, 0x61, 0x39, 0x7d, 0x84, 0x57,
    0x93, 0x58, 0x6f, 0x7f, 0xc5, 0xf9, 0xb0, 0x1c, 0xb8, 0xa5, 0xc0, 0x59,
    0xe9, 0x21, 0xe6, 0x7f, 0xac, 0x8b, 0x03, 0xc0, 0x10, 0x3d, 0x7b, 0x4e,
    0x7f, 0x29, 0xcf, 0x60, 0x4b, 0xff, 0xe6, 0x93, 0x0b, 0x2a, 0xbd, 0xb7,
    0x21, 0x18, 0xdd, 0xfa, 0xaf, 0xc9, 0x66, 0x9d, 0x21, 0x38, 0x3c, 0x12,
    0xfd, 0xef, 0x82, 0x50, 0xc5, 0x9b, 0xd3, 0x5b, 0x29, 0x1f, 0xa4, 0x33,
    0x67, 0xdb, 0x34, 0x95, 0x97, 0x34, 0xc2, 0x12, 0xa2, 0xfb, 0xd7, 0xbe,
    0x6e, 0xbb, 0x30, 0xda, 0x43, 0x28, 0xdf, 0x26, 0x92, 0x55, 0xd9, 0xc4,
    0x58, 0xc9, 0xed, 0x5b, 0x2e, 0x1c, 0x51, 0x0f, 0x7b, 0xf8, 0x1a, 0x9a,
    0x14, 0xe3, 0x88, 0x1a, 0x79, 0xde, 0x33, 0x13, 0x36, 0x47, 0x05, 0x34,
    0xec, 0xbb, 0xf0, 0xb1, 0x94, 0xc5, 0x1a, 0x32, 0x74, 0x0d, 0x02, 0x9f,
    0xcc, 0x81, 0x2f, 0xff, 0x6a, 0x6e, 0x9e, 0x8d, 0x85, 0x26, 0x37, 0xdf,
    0xdc, 0x3f, 0x41, 0x3f, 0x17, 0x2b, 0x88, 0x23, 0x37, 0xf3, 0xa1, 0x9f,
    0xd0, 0xdc, 0xd3, 0x24, 0x79, 0x86, 0x0a, 0xb3, 0x9c, 0xce, 0x9a, 0xf8,
    0x5d, 0x8e, 0xb6, 0xe0, 0x78, 0x12, 0xd9, 0xef, 0x48, 0x8c, 0x1c, 0x4a,
    0xf9, 0xd1, 0x02, 0x82, 0x01, 0x01, 0x00, 0x83, 0xe5, 0xcb, 0x67, 0xa7,
    0xa6, 0x72, 0xea, 0x4e, 0xf2, 0x6d, 0x4e, 0x71, 0x9c, 0x70, 0x1f, 0x2b,
    0x23, 0xaa, 0xd9, 0x00, 0x31, 0xdd, 0xea, 0xa2, 0x6d, 0x7c, 0xb8, 0xf6,
    0x86, 0x2c, 0x4c, 0x3d, 0xee, 0x67, 0x06, 0x3f, 0xc5, 0x3f, 0x75, 0x8b,
    0x47, 0x31, 0xcb, 0x31, 0xac, 0x76, 0x8c, 0xe9, 0x56, 0x3a, 0xb6, 0x4f,
    0x03, 0x78, 0x18, 0xd3, 0x18, 0x14, 0xfa, 0xd2, 0x9e, 0xbf, 0x09, 0x8b,
    0x59, 0x18, 0x54, 0x71, 0x2f, 0x3c, 0xe1, 0x6a, 0x83, 0x61, 0x2b, 0x49,
    0xd6, 0xbb, 0x6f, 0xb9, 0x00, 0x3c, 0xe2, 0xfa, 0x72, 0x54, 0x4d, 0xac,
    0x92, 0x6c, 0xb9, 0x05, 0x36, 0x98, 0x9a, 0xf3, 0x2f, 0xd4, 0x33, 0xe2,
    0x11, 0xd2, 0x5e, 0xbf, 0xa6, 0x1d, 0x2e, 0x4e, 0x1f, 0x4b, 0x3a, 0xb9,
    0xdd, 0xa3, 0xb8, 0xd9, 0x98, 0x23, 0xfc, 0x7d, 0x26, 0xfd, 0xb8, 0x1e,
    0xdf, 0x79, 0x3f, 0x6b, 0x4e, 0xff, 0x3d, 0xb0, 0xa7, 0xad, 0x2c, 0xb1,
    0x21, 0xe4, 0x5c, 0x30, 0x64, 0xad, 0x7f, 0x01, 0xb0, 0x89, 0xbb, 0x4a,
    0x6f, 0x29, 0xa3, 0x85, 0x9e, 0xea, 0x09, 0x13, 0x4b, 0xf0, 0x3b, 0x5b,
    0x1c, 0xa5, 0xb4, 0x12, 0x99, 0x83, 0xc0, 0x3c, 0x6c, 0x62, 0x2d, 0x62,
    0x3c, 0x9c, 0xd8, 0x69, 0x5c, 0x1f, 0x7c, 0x14, 0x5d, 0x97, 0x7b, 0x68,
    0xfc, 0x40, 0x4e, 0x49, 0x6f, 0xaf, 0x90, 0x07, 0x0b, 0x45, 0x45, 0x0c,
    0xf9, 0x0b, 0x8a, 0x28, 0x74, 0xea, 0x22, 0x2b, 0x12, 0xc0, 0x20, 0xe7,
    0x37, 0x6e, 0x63, 0x08, 0x24, 0xa4, 0xed, 0x17, 0xed, 0x17, 0x99, 0x5a,
    0xe9, 0xfd, 0x21, 0x78, 0x14, 0x66, 0x1b, 0xa9, 0xf9, 0x87, 0x55, 0x78,
    0x6d, 0x0b, 0xe8, 0x85, 0x79, 0x45, 0xc5, 0xbf, 0xdb, 0x77, 0xf9, 0xb6,
    0x79, 0x8b, 0xca, 0x47, 0xb5, 0x18, 0x76, 0x57, 0x4e, 0x1c, 0x5d};
const unsigned int key2_priv_der_len = 2351;
*/

const unsigned char key2_pub_der[] = {
    0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00,
    0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xda, 0x13, 0xd5,
    0xca, 0x19, 0x7a, 0x7c, 0x3f, 0x47, 0x03, 0xf2, 0xeb, 0x7f, 0x9c, 0x5e,
    0xc5, 0x46, 0x22, 0xec, 0x10, 0x60, 0x84, 0xe7, 0x5f, 0xf7, 0x55, 0x3e,
    0x7a, 0xfc, 0xfc, 0x9e, 0x05, 0x4f, 0x31, 0xf4, 0xd5, 0xfa, 0xec, 0xd0,
    0xeb, 0x1a, 0x04, 0x86, 0x8d, 0x8c, 0xc4, 0x85, 0x2c, 0x41, 0x1f, 0xc4,
    0xdc, 0x83, 0xd8, 0x41, 0x13, 0x38, 0x18, 0x12, 0x5d, 0xcb, 0x65, 0x26,
    0x65, 0xc2, 0x15, 0x31, 0x9e, 0xc4, 0x65, 0x64, 0xd1, 0xf5, 0x84, 0xf2,
    0x6d, 0x58, 0x11, 0x82, 0x53, 0x26, 0x0b, 0x5d, 0x96, 0x91, 0x9a, 0x79,
    0xe7, 0x35, 0x0e, 0x77, 0xce, 0xea, 0x54, 0x29, 0x73, 0x85, 0xc3, 0x36,
    0xe4, 0xf9, 0xfa, 0x96, 0xb8, 0xe5, 0x71, 0x3d, 0xda, 0x85, 0x0f, 0xa4,
    0xcf, 0x83, 0x50, 0x6d, 0x4b, 0x02, 0xaf, 0xc6, 0xe3, 0x37, 0x3a, 0xb5,
    0xc9, 0x73, 0x30, 0x38, 0x72, 0xd9, 0xe7, 0xde, 0x2a, 0xe5, 0x11, 0x83,
    0x0d, 0xa8, 0x19, 0xb4, 0x84, 0xe2, 0x3b, 0xdf, 0xa4, 0x39, 0x03, 0x92,
    0xfb, 0xfc, 0x6d, 0x00, 0xad, 0xed, 0xa7, 0x88, 0x84, 0xb9, 0xbd, 0x8a,
    0xa6, 0xbd, 0xf5, 0xc4, 0xee, 0xa6, 0x6f, 0xb3, 0xf8, 0x3f, 0xa8, 0x6d,
    0xfa, 0x7d, 0x3a, 0xf6, 0x9a, 0x79, 0x4a, 0x53, 0x53, 0xd1, 0x97, 0x50,
    0x8c, 0x72, 0xf3, 0xa8, 0xd7, 0x9e, 0xac, 0x2b, 0x58, 0x84, 0xa0, 0x23,
    0x5c, 0x08, 0xc8, 0x10, 0x33, 0x58, 0x5e, 0x95, 0x5c, 0x1d, 0x07, 0xb6,
    0x0d, 0xe6, 0x68, 0x8c, 0xce, 0x20, 0x08, 0x7c, 0xf9, 0x23, 0x2f, 0x6b,
    0xf0, 0xd7, 0x89, 0x81, 0x40, 0x79, 0x23, 0xf5, 0x1c, 0x73, 0x76, 0xf9,
    0x28, 0x22, 0x80, 0xd7, 0x99, 0xfa, 0x2e, 0x69, 0xf3, 0x74, 0xae, 0xde,
    0xe3, 0x6a, 0x38, 0x4e, 0xa2, 0x33, 0xaf, 0xb8, 0x7f, 0x78, 0xa8, 0xa6,
    0x23, 0xb4, 0x85, 0xc7, 0xac, 0xe4, 0xca, 0x14, 0x5b, 0xe7, 0x9b, 0xa4,
    0x34, 0xe4, 0xbd, 0x48, 0x22, 0x89, 0x7f, 0xf8, 0xf5, 0xd2, 0x14, 0x7f,
    0x30, 0x65, 0x3b, 0x22, 0xf6, 0x45, 0x68, 0xeb, 0x17, 0xbb, 0xc9, 0x43,
    0xeb, 0xbc, 0x50, 0xa1, 0x30, 0x3d, 0x5c, 0xb1, 0xff, 0xfa, 0x9c, 0x60,
    0x1a, 0x03, 0xfe, 0xbd, 0x73, 0xa9, 0x8b, 0x88, 0x4a, 0x44, 0x40, 0x26,
    0x50, 0xcc, 0xe3, 0x86, 0x88, 0x9f, 0x82, 0xf1, 0x62, 0x94, 0x43, 0x57,
    0xfb, 0x7f, 0xfb, 0x49, 0xda, 0xeb, 0x26, 0x6d, 0x9a, 0x1e, 0x24, 0x8d,
    0x7c, 0x32, 0x79, 0x64, 0x8a, 0x91, 0x2c, 0xff, 0xbd, 0x1a, 0x41, 0x86,
    0x88, 0x41, 0x20, 0x6c, 0x3a, 0xea, 0x17, 0x44, 0x34, 0x6f, 0x5b, 0x9c,
    0x82, 0x7a, 0xfc, 0x3b, 0xbd, 0xdd, 0xec, 0xb5, 0x90, 0x1b, 0x6a, 0xb6,
    0xc0, 0x0d, 0x7e, 0x4c, 0xe9, 0x3e, 0x43, 0x4d, 0xe6, 0xe7, 0x7d, 0x5a,
    0x69, 0xff, 0x81, 0x10, 0xe1, 0x2a, 0x60, 0x8a, 0x30, 0xe9, 0x29, 0x7a,
    0x55, 0xc0, 0x6b, 0x5d, 0x17, 0xcd, 0xc6, 0x9c, 0x1e, 0x7e, 0xa8, 0x0c,
    0xf6, 0x80, 0x80, 0xd8, 0x6f, 0xa4, 0xa3, 0x3f, 0xb2, 0xc5, 0xa7, 0x20,
    0xba, 0x1c, 0xab, 0xb8, 0x23, 0x84, 0x07, 0x01, 0x03, 0x3e, 0x71, 0x87,
    0x25, 0x48, 0x9d, 0xb5, 0x11, 0x9f, 0xcf, 0xc6, 0xa6, 0x1b, 0x28, 0xba,
    0xfc, 0xd8, 0x73, 0x1f, 0x40, 0x8c, 0xed, 0x90, 0xa4, 0x0b, 0x75, 0x8c,
    0xea, 0x09, 0x1f, 0xb6, 0x10, 0xaf, 0x80, 0x4d, 0x1a, 0xe2, 0xac, 0x6c,
    0x8f, 0x17, 0x14, 0xff, 0x07, 0x5b, 0xd9, 0x7a, 0xa4, 0x74, 0x04, 0xa8,
    0xef, 0xc1, 0xe2, 0xd4, 0xdb, 0x42, 0x06, 0x20, 0x3d, 0x0a, 0x59, 0xc9,
    0x93, 0x25, 0x59, 0x38, 0xaa, 0x10, 0xa4, 0xea, 0x24, 0x8d, 0xe7, 0x0a,
    0xa7, 0x61, 0x1c, 0x40, 0x83, 0x02, 0x03, 0x01, 0x00, 0x01};
const unsigned int key2_pub_der_len = 550;

using namespace CeLogin;

#define DO_TEST(results, condition, trace)                                     \
    if (condition)                                                             \
    {                                                                          \
        (results).logSuccess();                                                \
    }                                                                          \
    else                                                                       \
    {                                                                          \
        (results).logFailure();                                                \
        std::cout << "Failure: line " << std::dec << __LINE__ << " ("          \
                  << (#condition) << ") Trace: 0x" << std::hex << (trace)      \
                  << std::endl                                                 \
                  << std::endl;                                                \
    }

struct UnitTestResult
{
    /* data */
    UnitTestResult() : mFailedTests(0), mTotalTests(0)
    {}
    UnitTestResult operator+(const UnitTestResult& rhsParm) const
    {
        UnitTestResult sResult;
        sResult.mFailedTests = mFailedTests + rhsParm.mFailedTests;
        sResult.mTotalTests = mTotalTests + rhsParm.mTotalTests;
        return sResult;
    }

    UnitTestResult& operator+=(const UnitTestResult& rhsParm)
    {
        mFailedTests += rhsParm.mFailedTests;
        mTotalTests += rhsParm.mTotalTests;
        return *this;
    }

    void logSuccess()
    {
        mTotalTests++;
    }

    void logFailure()
    {
        mTotalTests++;
        mFailedTests++;
    }

    uint64_t mFailedTests;
    uint64_t mTotalTests;
};

CeLoginRc cplusplus_getServiceAuthorityV1(
    const std::vector<uint8_t>& acfParm, const std::string& passwordParm,
    const uint64_t timeParm, const uint8_t* pubKeyParm,
    const uint64_t pubKeyLenParm, const std::string& serialNumberParm,
    ServiceAuthority& authParm, uint64_t& expirationParm)
{
    return getServiceAuthorityV1(
        acfParm.data(), acfParm.size(), passwordParm.c_str(),
        passwordParm.length(), timeParm, pubKeyParm, pubKeyLenParm,
        serialNumberParm.data(), serialNumberParm.length(), authParm,
        expirationParm);
}

static CeLogin::CeLoginCreateHsfArgsV1 GetDefaultHsfArgs();

static UnitTestResult ut_validate_defaults();
static UnitTestResult ut_validate_unset_serial();
static UnitTestResult ut_invalid_parms();
static UnitTestResult ut_create_password_hash_variations();
static UnitTestResult ut_expiration_time_validation();
static UnitTestResult ut_max_expiration_time_validation();
static UnitTestResult ut_pki_mismatch();
static UnitTestResult ut_corrupted_payload();
static UnitTestResult ut_incorrect_password();
static UnitTestResult ut_incorrect_serial();

void cli::unit_test_main(int argc, char** argv)
{
    UnitTestResult sResults;

    sResults += ut_validate_defaults();
    sResults += ut_invalid_parms();
    sResults += ut_validate_unset_serial();
    sResults += ut_create_password_hash_variations();
    sResults += ut_expiration_time_validation();
    sResults += ut_max_expiration_time_validation();
    sResults += ut_pki_mismatch();
    sResults += ut_corrupted_payload();
    sResults += ut_incorrect_password();
    sResults += ut_incorrect_serial();

    std::cout << std::dec << sResults.mFailedTests << " failures out of "
              << std::dec << sResults.mTotalTests << " total tests run"
              << std::endl;

    if (sResults.mFailedTests > 0)
    {
        exit(EXIT_FAILURE);
    }
    else
    {
        exit(EXIT_SUCCESS);
    }
}

CeLogin::CeLoginCreateHsfArgsV1 GetDefaultHsfArgs()
{
    CeLogin::CeLoginCreateHsfArgsV1 sCreateHsfArgs;
    sCreateHsfArgs.mSourceFileName = "unit test";
    sCreateHsfArgs.mMachines.push_back(
        CeLogin::Machine("MySerial", CeLogin::ServiceAuth_CE, CeLogin::P10));
    sCreateHsfArgs.mExpirationDate = "2021-12-20";
    sCreateHsfArgs.mRequestId = "autogen-test-hsf";
    sCreateHsfArgs.mHashedAuthCodeLength = 512 / 8;
    sCreateHsfArgs.mSaltLength = 512 / 8;
    sCreateHsfArgs.mIterations = CeLogin::CeLogin_PBKDF2_Iterations;
    sCreateHsfArgs.mPassword = "password";
    sCreateHsfArgs.mPasswordHashAlgorithm = CeLogin::PasswordHash_Production;
    std::copy(key1_priv_der, key1_priv_der + key1_priv_der_len,
              std::back_inserter(sCreateHsfArgs.mPrivateKey));
    return sCreateHsfArgs;
}

UnitTestResult ut_validate_defaults()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
    std::vector<uint8_t> sAcf;

    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    ServiceAuthority sAuth;
    uint64_t sExp;
    sRc = cplusplus_getServiceAuthorityV1(
        sAcf, sHsfArgs.mPassword, 0, key1_pub_der, key1_pub_der_len,
        sHsfArgs.mMachines.front().mSerialNumber, sAuth, sExp);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
    DO_TEST(sResult, sExp > 0, sExp);
    DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);

    return sResult;
}

UnitTestResult ut_validate_unset_serial()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    std::string sUnsetSerial = "UNSET";

    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
    sHsfArgs.mMachines.push_back(Machine(sUnsetSerial, ServiceAuth_CE, P10));

    std::vector<uint8_t> sAcf;
    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    const uint64_t sCurrentTime = 0;
    ServiceAuthority sAuth;
    uint64_t sExp;
    sRc = cplusplus_getServiceAuthorityV1(
        sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der, key1_pub_der_len,
        sUnsetSerial, sAuth, sExp);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
    DO_TEST(sResult, sExp > 0, sExp);
    DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);

    return sResult;
}

UnitTestResult ut_invalid_parms()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
    std::vector<uint8_t> sAcf;

    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    const uint64_t sCurrentTime = 0; // Set to 0 so that it can't be expired

    // ACF binary is NULL with a non-zero length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            NULL, sAcf.size(), sHsfArgs.mPassword.data(),
            sHsfArgs.mPassword.length(), sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber.data(),
            sHsfArgs.mMachines.front().mSerialNumber.length(), sAuth,
            sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidAcfPtr == sRc, sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    // ACF binary is valid with a zero length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            sAcf.data(), 0, sHsfArgs.mPassword.data(),
            sHsfArgs.mPassword.length(), sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber.data(),
            sHsfArgs.mMachines.front().mSerialNumber.length(), sAuth,
            sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidAcfLength == sRc, sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    // Password is NULL with a non-zero length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            sAcf.data(), sAcf.size(), NULL, sHsfArgs.mPassword.length(),
            sCurrentTime, key1_pub_der, key1_pub_der_len,
            sHsfArgs.mMachines.front().mSerialNumber.data(),
            sHsfArgs.mMachines.front().mSerialNumber.length(), sAuth,
            sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidPasswordPtr == sRc, sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    // Password is valid with a zero length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            sAcf.data(), sAcf.size(), sHsfArgs.mPassword.data(), 0,
            sCurrentTime, key1_pub_der, key1_pub_der_len,
            sHsfArgs.mMachines.front().mSerialNumber.data(),
            sHsfArgs.mMachines.front().mSerialNumber.length(), sAuth,
            sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidPasswordLength == sRc,
                sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    // Serial number is NULL with a valid length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            sAcf.data(), sAcf.size(), sHsfArgs.mPassword.data(),
            sHsfArgs.mPassword.length(), sCurrentTime, key1_pub_der,
            key1_pub_der_len, NULL,
            sHsfArgs.mMachines.front().mSerialNumber.length(), sAuth,
            sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidSerialNumberPtr == sRc,
                sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    // Serial number is valid with a zero length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            sAcf.data(), sAcf.size(), sHsfArgs.mPassword.data(),
            sHsfArgs.mPassword.length(), sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber.data(),
            0, sAuth, sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidSerialNumberLength == sRc,
                sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    // Public Key is NULL with a non-zero length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            sAcf.data(), sAcf.size(), sHsfArgs.mPassword.data(),
            sHsfArgs.mPassword.length(), sCurrentTime, NULL, key1_pub_der_len,
            sHsfArgs.mMachines.front().mSerialNumber.data(),
            sHsfArgs.mMachines.front().mSerialNumber.size(), sAuth,
            sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidPublicKeyPtr == sRc, sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    // Public Key is valid with a zero length
    {
        ServiceAuthority sAuth = ServiceAuth_None;
        uint64_t sExpirationTime = 0;

        sRc = getServiceAuthorityV1(
            sAcf.data(), sAcf.size(), sHsfArgs.mPassword.data(),
            sHsfArgs.mPassword.length(), sCurrentTime, key1_pub_der, 0,
            sHsfArgs.mMachines.front().mSerialNumber.data(),
            sHsfArgs.mMachines.front().mSerialNumber.size(), sAuth,
            sExpirationTime);
        DO_TEST(sResult, CeLoginRc::GetSevAuth_InvalidPublicKeyLength == sRc,
                sRc);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        DO_TEST(sResult, 0 == sExpirationTime, sExpirationTime);
    }

    return sResult;
}

UnitTestResult ut_create_password_hash_variations()
{
    UnitTestResult sResult;
    // Explicitly test that change salt or iterations on PBKDF2_HMAC produces
    // different hashed auth codes.

    const std::string sPassword1 = "TheTestPassword";
    const std::string sPassword2 = "TheTestPasswor";
    const std::array<uint8_t, 8> sSalt1 = {0x54, 0x65, 0x73, 0x74,
                                           0x53, 0x61, 0x6c, 0x74};
    const std::array<uint8_t, 17> sSalt2 = {0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
                                            0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
                                            0x74, 0x53, 0x61, 0x6c, 0x74};

    const uint64_t sIterations1 = 10;
    const uint64_t sIterations2 = 10000;

    // clang-format off
    std::vector<std::array<uint8_t, 64> > sExpectedValues;
    // clang-format on

    const std::array<uint8_t, 64> sExpectedPass1Salt1Iter1 = {
        0x3a, 0xab, 0x10, 0xda, 0xf7, 0xce, 0xce, 0xaa, 0x1c, 0x5b, 0xe0,
        0x6c, 0x80, 0x83, 0xc1, 0x6d, 0xae, 0xee, 0x3,  0x32, 0x16, 0xa9,
        0x78, 0x3b, 0xb1, 0x11, 0x6f, 0xd8, 0x1d, 0x47, 0x20, 0x87, 0xc9,
        0x1c, 0xcf, 0xc1, 0x5c, 0x0,  0xa3, 0xe0, 0xf0, 0x72, 0x8f, 0x69,
        0x3,  0xb8, 0x5,  0x11, 0xfb, 0x22, 0xc,  0x7e, 0xb0, 0x80, 0x32,
        0x14, 0x4d, 0x6d, 0xc1, 0x75, 0xca, 0xf2, 0xb2, 0xd1};
    sExpectedValues.push_back(sExpectedPass1Salt1Iter1);

    const std::array<uint8_t, 64> sExpectedPass1Salt1Iter2 = {
        0x5f, 0xa1, 0x92, 0xb,  0x40, 0xb1, 0xc7, 0xcd, 0xa9, 0x59, 0xd8,
        0xbc, 0x4a, 0x97, 0xe8, 0xa2, 0xc8, 0xc4, 0xab, 0xc0, 0xd9, 0xc6,
        0xe5, 0x1a, 0xd,  0x6b, 0xd4, 0x3c, 0xb2, 0x78, 0x15, 0xf7, 0x27,
        0xeb, 0x2c, 0xac, 0xb7, 0xce, 0xc1, 0x50, 0x24, 0xd7, 0x95, 0x67,
        0xd1, 0xc6, 0xaa, 0xe8, 0x9c, 0x11, 0x19, 0xd5, 0x93, 0xed, 0x1b,
        0x8c, 0xd,  0xa7, 0xe,  0x55, 0x50, 0x8c, 0x17, 0x7b};
    sExpectedValues.push_back(sExpectedPass1Salt1Iter2);

    const std::array<uint8_t, 64> sExpectedPass1Salt2Iter1 = {
        0xad, 0x61, 0x63, 0x5d, 0x1a, 0xf9, 0x54, 0x74, 0x38, 0xc1, 0xa1,
        0x2,  0x6f, 0x16, 0xa9, 0x6f, 0xec, 0xb4, 0x5c, 0xf1, 0xad, 0x17,
        0x4f, 0x5f, 0xe8, 0x52, 0x71, 0x90, 0x68, 0x78, 0xc3, 0x19, 0x65,
        0xd3, 0x49, 0x4e, 0xfd, 0x34, 0xe1, 0x9c, 0x80, 0x47, 0x4,  0xf8,
        0xa8, 0xf0, 0x4d, 0xe6, 0xcc, 0x36, 0xd3, 0x5,  0x2b, 0x9b, 0x9c,
        0x4d, 0x93, 0x46, 0x62, 0x5,  0xde, 0xe9, 0xe7, 0xc9};
    sExpectedValues.push_back(sExpectedPass1Salt2Iter1);

    const std::array<uint8_t, 64> sExpectedPass1Salt2Iter2 = {
        0xb1, 0x66, 0xf0, 0xef, 0xc0, 0xe7, 0x8d, 0x45, 0x47, 0x9d, 0xcd,
        0x8e, 0x4d, 0x29, 0x28, 0x70, 0x3a, 0x38, 0x7f, 0xf7, 0xd,  0xb6,
        0xfc, 0x23, 0x19, 0x1,  0x32, 0x31, 0x5,  0x32, 0xc6, 0x1a, 0x60,
        0x86, 0xff, 0x5b, 0x89, 0xb9, 0x68, 0xe2, 0x9a, 0xdc, 0x6f, 0x83,
        0x17, 0x62, 0x2,  0x87, 0xf8, 0x84, 0xcd, 0x43, 0xf,  0x7f, 0x91,
        0x98, 0x9d, 0xe3, 0xc,  0x6f, 0x23, 0x71, 0xb3, 0x7f};
    sExpectedValues.push_back(sExpectedPass1Salt2Iter2);

    const std::array<uint8_t, 64> sExpectedPass2Salt1Iter1 = {
        0xf,  0xc8, 0xed, 0xac, 0x97, 0x60, 0xb,  0xfe, 0x57, 0x16, 0xfb,
        0xd7, 0xf5, 0x43, 0x7f, 0x22, 0xfc, 0xa,  0x2e, 0xaf, 0xb,  0xd2,
        0x56, 0x92, 0xd4, 0x7c, 0xcf, 0xea, 0x6,  0xd0, 0x1e, 0xc5, 0x6d,
        0x3c, 0x54, 0xa9, 0x65, 0x8a, 0xf1, 0x50, 0x28, 0xae, 0x9a, 0xa2,
        0x79, 0x13, 0xa6, 0xaa, 0xc5, 0xae, 0x1d, 0x32, 0x6a, 0x86, 0x7b,
        0xe,  0x30, 0xe1, 0x6d, 0xbf, 0x56, 0x64, 0xff, 0xba};
    sExpectedValues.push_back(sExpectedPass2Salt1Iter1);

    for (uint16_t i = 0; i < sExpectedValues.size(); i++)
    {
        for (uint16_t j = i + 1; j < sExpectedValues.size(); j++)
        {
            DO_TEST(sResult, sExpectedValues[i] != sExpectedValues[j],
                    ((uint32_t)i) << 16 | ((uint32_t)j));
        }
    }

    CeLoginRc sRc = CeLoginRc::Success;

    std::array<uint8_t, 64> sAuthCode;
    sAuthCode.fill(0);

    sRc = createPasswordHash(
        sPassword1.data(), sPassword1.length(), sSalt1.data(), sSalt1.size(),
        sIterations1, sAuthCode.data(), sAuthCode.size(), sAuthCode.size());
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
    DO_TEST(sResult, sExpectedPass1Salt1Iter1 == sAuthCode, 0);

    sRc = createPasswordHash(
        sPassword1.data(), sPassword1.length(), sSalt1.data(), sSalt1.size(),
        sIterations2, sAuthCode.data(), sAuthCode.size(), sAuthCode.size());
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
    DO_TEST(sResult, sExpectedPass1Salt1Iter2 == sAuthCode, 0);

    sRc = createPasswordHash(
        sPassword1.data(), sPassword1.length(), sSalt2.data(), sSalt2.size(),
        sIterations1, sAuthCode.data(), sAuthCode.size(), sAuthCode.size());
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
    DO_TEST(sResult, sExpectedPass1Salt2Iter1 == sAuthCode, 0);

    sRc = createPasswordHash(
        sPassword1.data(), sPassword1.length(), sSalt2.data(), sSalt2.size(),
        sIterations2, sAuthCode.data(), sAuthCode.size(), sAuthCode.size());
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
    DO_TEST(sResult, sExpectedPass1Salt2Iter2 == sAuthCode, 0);

    sRc = createPasswordHash(
        sPassword2.data(), sPassword2.length(), sSalt1.data(), sSalt1.size(),
        sIterations1, sAuthCode.data(), sAuthCode.size(), sAuthCode.size());
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
    DO_TEST(sResult, sExpectedPass2Salt1Iter1 == sAuthCode, 0);

    return sResult;
}

UnitTestResult ut_expiration_time_validation()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    const uint64_t sExpirationTimestamp = 1650585600;
    const std::string sExpirationString = "2022-04-22";

    // Validate that the timestamp and string are the same time
    {
        ASN1_TIME* sAsn1DateFromString = ASN1_TIME_new();
        ASN1_TIME* sAsn1DateFromTimestamp = ASN1_TIME_new();
        DO_TEST(sResult, sAsn1DateFromString, sAsn1DateFromString);
        DO_TEST(sResult, sAsn1DateFromTimestamp, sAsn1DateFromTimestamp);

        if (sAsn1DateFromString && sAsn1DateFromTimestamp)
        {
            CeLogin_Date sDate;
            sRc = getDateFromString(sExpirationString.data(),
                                    sExpirationString.length(), sDate);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

            sRc = getAsn1Time(sDate, sAsn1DateFromString);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

            ASN1_TIME* sOsslResult =
                ASN1_TIME_set(sAsn1DateFromTimestamp, sExpirationTimestamp);
            DO_TEST(sResult, sOsslResult == sAsn1DateFromTimestamp,
                    sOsslResult);

            // returns -1 if a is before b, 0 if a equals b, or 1 if a is
            // after b. -2 is returned on error.
            const int sCompareResult =
                ASN1_TIME_compare(sAsn1DateFromString, sAsn1DateFromTimestamp);
            DO_TEST(sResult, 0 == sCompareResult, sCompareResult);
        }
        if (sAsn1DateFromString)
            ASN1_TIME_free(sAsn1DateFromString);
        if (sAsn1DateFromTimestamp)
            ASN1_TIME_free(sAsn1DateFromTimestamp);
    }

    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
    sHsfArgs.mExpirationDate = sExpirationString;

    std::vector<uint8_t> sAcf;
    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    {
        // Current time is epoch
        const uint64_t sCurrentTime = 0;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
        DO_TEST(sResult, sExpirationTimestamp == sExpiration, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
    }

    {
        // Current time is Expiration - 1
        const uint64_t sCurrentTime = sExpirationTimestamp - 1;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
        DO_TEST(sResult, sExpirationTimestamp == sExpiration, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
    }
    {
        // Current time is Expiration
        const uint64_t sCurrentTime = sExpirationTimestamp;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
        DO_TEST(sResult, sExpirationTimestamp == sExpiration, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
    }
    {
        // Current time is Expiration + 1
        const uint64_t sCurrentTime = sExpirationTimestamp + 1;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::AcfExpired == sRc, sRc);
        DO_TEST(sResult, 0 == sExpiration, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
    }

    return sResult;
}

UnitTestResult ut_max_expiration_time_validation()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    const uint64_t sMaxExpirationTimestamp = 253402214400;
    const std::string sMaxExpirationString = "9999-12-31";

    const uint64_t sAlmostMaxExpirationTimestamp = 253402128000;
    const std::string sAlmostMaxExpirationString = "9999-12-30";

    // Validate that the timestamp and string are the same time
    {
        ASN1_TIME* sAsn1DateFromString = ASN1_TIME_new();
        ASN1_TIME* sAsn1DateFromTimestamp = ASN1_TIME_new();
        DO_TEST(sResult, sAsn1DateFromString, sAsn1DateFromString);
        DO_TEST(sResult, sAsn1DateFromTimestamp, sAsn1DateFromTimestamp);

        if (sAsn1DateFromString && sAsn1DateFromTimestamp)
        {
            CeLogin_Date sDate;
            sRc = getDateFromString(sMaxExpirationString.data(),
                                    sMaxExpirationString.length(), sDate);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

            sRc = getAsn1Time(sDate, sAsn1DateFromString);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

            ASN1_TIME* sOsslResult =
                ASN1_TIME_set(sAsn1DateFromTimestamp, sMaxExpirationTimestamp);
            DO_TEST(sResult, sOsslResult == sAsn1DateFromTimestamp,
                    sOsslResult);

            // returns -1 if a is before b, 0 if a equals b, or 1 if a is
            // after b. -2 is returned on error.
            const int sCompareResult =
                ASN1_TIME_compare(sAsn1DateFromString, sAsn1DateFromTimestamp);
            DO_TEST(sResult, 0 == sCompareResult, sCompareResult);
        }

        if (sAsn1DateFromString && sAsn1DateFromTimestamp)
        {
            CeLogin_Date sDate;
            sRc = getDateFromString(sAlmostMaxExpirationString.data(),
                                    sAlmostMaxExpirationString.length(), sDate);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

            sRc = getAsn1Time(sDate, sAsn1DateFromString);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

            ASN1_TIME* sOsslResult = ASN1_TIME_set(
                sAsn1DateFromTimestamp, sAlmostMaxExpirationTimestamp);
            DO_TEST(sResult, sOsslResult == sAsn1DateFromTimestamp,
                    sOsslResult);

            // returns -1 if a is before b, 0 if a equals b, or 1 if a is
            // after b. -2 is returned on error.
            const int sCompareResult =
                ASN1_TIME_compare(sAsn1DateFromString, sAsn1DateFromTimestamp);
            DO_TEST(sResult, 0 == sCompareResult, sCompareResult);
        }
        if (sAsn1DateFromString)
            ASN1_TIME_free(sAsn1DateFromString);
        if (sAsn1DateFromTimestamp)
            ASN1_TIME_free(sAsn1DateFromTimestamp);
    }

    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
    sHsfArgs.mExpirationDate = sAlmostMaxExpirationString;

    std::vector<uint8_t> sAcf;
    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    {
        // Current time is epoch
        const uint64_t sCurrentTime = 0;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
        DO_TEST(sResult, sAlmostMaxExpirationTimestamp == sExpiration,
                sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
    }

    {
        // Current time is Expiration - 1
        const uint64_t sCurrentTime = sAlmostMaxExpirationTimestamp - 1;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
        DO_TEST(sResult, sAlmostMaxExpirationTimestamp == sExpiration,
                sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
    }

    {
        // Current time is Expiration
        const uint64_t sCurrentTime = sAlmostMaxExpirationTimestamp;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
        DO_TEST(sResult, sAlmostMaxExpirationTimestamp == sExpiration,
                sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
    }

    {
        // Current time is Max Expiration Time
        const uint64_t sCurrentTime = sMaxExpirationTimestamp;

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::AcfExpired == sRc, sRc);
        DO_TEST(sResult, 0 == sExpiration, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
    }

    return sResult;
}

UnitTestResult ut_pki_mismatch()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;
    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();

    std::vector<uint8_t> sAcf;
    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    const uint64_t sCurrentTime = 0;

    uint64_t sExpiration = 0;
    ServiceAuthority sAuth = ServiceAuth_None;

    sRc = cplusplus_getServiceAuthorityV1(
        sAcf, sHsfArgs.mPassword, sCurrentTime, key2_pub_der, key2_pub_der_len,
        sHsfArgs.mMachines.front().mSerialNumber, sAuth, sExpiration);
    DO_TEST(sResult, CeLoginRc::SignatureNotValid == sRc, sRc);
    DO_TEST(sResult, 0 == sExpiration, sExpiration);
    DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);

    return sResult;
}

UnitTestResult ut_corrupted_payload()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    const std::string sDetectableString = "DetectThisStringInTheAcfBinary";
    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
    sHsfArgs.mRequestId = sDetectableString;
    sHsfArgs.mSourceFileName = sDetectableString;

    const uint64_t sCurrentTime = 0;

    std::vector<uint8_t> sAcf;
    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    // Not all data in the ACF is required to be valid.
    // SourceFileName can be corrupted with no impact.

    // Attempt to decode the corrupted acf. If decode succeeds, read the
    // SourceFileName and determine if it was corrupted. If it was, then skip
    // the iteration.

    for (uint64_t sIdx = 0; sIdx < sAcf.size(); sIdx++)
    {
        std::vector<uint8_t> sCorruptedAcf = sAcf;
        sCorruptedAcf[sIdx] = ~sCorruptedAcf[sIdx];

        const uint8_t* sAcfDataPtr = sCorruptedAcf.data();
        CELoginSequenceV1* sDecodedAcf =
            d2i_CELoginSequenceV1(NULL, &sAcfDataPtr, sAcf.size());

        bool sSkipIteration = false;

        if (sDecodedAcf)
        {
            const std::string sSourceFileName(
                (const char*)sDecodedAcf->sourceFileName->data,
                sDecodedAcf->sourceFileName->length);
            if (sDetectableString != sSourceFileName)
            {
                sSkipIteration = true;
            }
        }

        if (!sSkipIteration)
        {
            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sCorruptedAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber,
                sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::Success != sRc, sIdx);
            DO_TEST(sResult, 0 == sExpiration, sIdx);
            DO_TEST(sResult, sAuth == ServiceAuth_None, sIdx);
        }
    }

    return sResult;
}

UnitTestResult ut_incorrect_password()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    const std::string sCorrectPassword = "CorrectPassword";
    const uint64_t sCurrentTime = 0;

    CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
    sHsfArgs.mPassword = sCorrectPassword;

    std::vector<uint8_t> sAcf;
    sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
    DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

    // Validate that the correct password works
    {
        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sCorrectPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
        DO_TEST(sResult, sExpiration > 0, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
    }

    // Password shorter
    {
        std::string sIncorrectPassword =
            sCorrectPassword.substr(0, sCorrectPassword.length() - 1);

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sIncorrectPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::PasswordNotValid == sRc, sRc);
        DO_TEST(sResult, sExpiration == 0, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
    }

    // Password with extra byte
    {
        std::string sIncorrectPassword = sCorrectPassword + "X";

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sIncorrectPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::PasswordNotValid == sRc, sRc);
        DO_TEST(sResult, sExpiration == 0, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
    }

    // Modify each byte of the password and make sure it fails
    for (uint64_t sIdx = 0; sIdx < sCorrectPassword.length(); sIdx++)
    {
        std::string sIncorrectPassword = sCorrectPassword;
        sIncorrectPassword[sIdx] = ~sIncorrectPassword[sIdx];

        uint64_t sExpiration = 0;
        ServiceAuthority sAuth = ServiceAuth_None;

        sRc = cplusplus_getServiceAuthorityV1(
            sAcf, sIncorrectPassword, sCurrentTime, key1_pub_der,
            key1_pub_der_len, sHsfArgs.mMachines.front().mSerialNumber, sAuth,
            sExpiration);
        DO_TEST(sResult, CeLoginRc::PasswordNotValid == sRc, sRc);
        DO_TEST(sResult, sExpiration == 0, sExpiration);
        DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
    }

    return sResult;
}

UnitTestResult ut_incorrect_serial()
{
    UnitTestResult sResult;
    CeLoginRc sRc = CeLoginRc::Success;

    const uint64_t sCurrentTime = 0;

    {
        // Test that machine array is searched properly
        std::string sSerial1 = "Serial1";
        std::string sSerial2 = "Serial2";
        std::string sSerial3 = "Serial3";
        std::string sSerial4 = "Serial4"; // not found
        std::string sSerial5 = "UNSET";   // not found
        CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
        sHsfArgs.mMachines.clear();
        sHsfArgs.mMachines.push_back(Machine(sSerial1, ServiceAuth_CE, P10));
        sHsfArgs.mMachines.push_back(Machine(sSerial2, ServiceAuth_Dev, P10));
        sHsfArgs.mMachines.push_back(Machine(sSerial3, ServiceAuth_CE, P10));

        std::vector<uint8_t> sAcf;
        sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

        {
            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sSerial1, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
            DO_TEST(sResult, sExpiration > 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
        }

        {
            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sSerial2, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
            DO_TEST(sResult, sExpiration > 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_Dev, sAuth);
        }
        {
            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sSerial3, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
            DO_TEST(sResult, sExpiration > 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
        }
        {
            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sSerial4, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::SerialNumberMismatch == sRc, sRc);
            DO_TEST(sResult, sExpiration == 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        }
        {
            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sSerial5, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::SerialNumberMismatch == sRc, sRc);
            DO_TEST(sResult, sExpiration == 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        }
    }

    {
        // Test Serial Number Not Set
        std::string sSerial1 = "UNSET";
        CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
        sHsfArgs.mMachines.clear();
        sHsfArgs.mMachines.push_back(Machine(sSerial1, ServiceAuth_CE, P10));

        std::vector<uint8_t> sAcf;
        sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

        {
            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sSerial1, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);
            DO_TEST(sResult, sExpiration > 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_CE, sAuth);
        }
    }

    {
        std::string sSerial1 = "ThisIsTheSerial";
        CeLoginCreateHsfArgsV1 sHsfArgs = GetDefaultHsfArgs();
        sHsfArgs.mMachines.clear();
        sHsfArgs.mMachines.push_back(Machine(sSerial1, ServiceAuth_CE, P10));

        std::vector<uint8_t> sAcf;
        sRc = createCeLoginAcfV1(sHsfArgs, sAcf);
        DO_TEST(sResult, CeLoginRc::Success == sRc, sRc);

        // Serial Number Too Short
        {
            std::string sIncorrectSerial =
                sSerial1.substr(0, sSerial1.length() - 1);

            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sIncorrectSerial, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::SerialNumberMismatch == sRc, sRc);
            DO_TEST(sResult, sExpiration == 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        }

        // Serial Number Too Long
        {
            std::string sIncorrectSerial = sSerial1 + "A";

            uint64_t sExpiration = 0;
            ServiceAuthority sAuth = ServiceAuth_None;

            sRc = cplusplus_getServiceAuthorityV1(
                sAcf, sHsfArgs.mPassword, sCurrentTime, key1_pub_der,
                key1_pub_der_len, sIncorrectSerial, sAuth, sExpiration);
            DO_TEST(sResult, CeLoginRc::SerialNumberMismatch == sRc, sRc);
            DO_TEST(sResult, sExpiration == 0, sExpiration);
            DO_TEST(sResult, sAuth == ServiceAuth_None, sAuth);
        }
    }

    return sResult;
}